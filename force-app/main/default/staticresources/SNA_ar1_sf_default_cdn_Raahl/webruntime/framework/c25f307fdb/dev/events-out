(function () {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getDefaultExportFromNamespaceIfPresent (n) {
    	return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
    }

    function getDefaultExportFromNamespaceIfNotNamed (n) {
    	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function commonjsRequire (path) {
    	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
    }

    var js_cookie = {exports: {}};

    /*!
     * JavaScript Cookie v2.2.1
     * https://github.com/js-cookie/js-cookie
     *
     * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
     * Released under the MIT license
     */

    (function (module, exports) {
    ;(function (factory) {
    	var registeredInModuleLoader;
    	if (typeof undefined === 'function' && undefined.amd) {
    		undefined(factory);
    		registeredInModuleLoader = true;
    	}
    	if ('object' === 'object') {
    		module.exports = factory();
    		registeredInModuleLoader = true;
    	}
    	if (!registeredInModuleLoader) {
    		var OldCookies = window.Cookies;
    		var api = window.Cookies = factory();
    		api.noConflict = function () {
    			window.Cookies = OldCookies;
    			return api;
    		};
    	}
    }(function () {
    	function extend () {
    		var i = 0;
    		var result = {};
    		for (; i < arguments.length; i++) {
    			var attributes = arguments[ i ];
    			for (var key in attributes) {
    				result[key] = attributes[key];
    			}
    		}
    		return result;
    	}

    	function decode (s) {
    		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
    	}

    	function init (converter) {
    		function api() {}

    		function set (key, value, attributes) {
    			if (typeof document === 'undefined') {
    				return;
    			}

    			attributes = extend({
    				path: '/'
    			}, api.defaults, attributes);

    			if (typeof attributes.expires === 'number') {
    				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
    			}

    			// We're using "expires" because "max-age" is not supported by IE
    			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

    			try {
    				var result = JSON.stringify(value);
    				if (/^[\{\[]/.test(result)) {
    					value = result;
    				}
    			} catch (e) {}

    			value = converter.write ?
    				converter.write(value, key) :
    				encodeURIComponent(String(value))
    					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

    			key = encodeURIComponent(String(key))
    				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
    				.replace(/[\(\)]/g, escape);

    			var stringifiedAttributes = '';
    			for (var attributeName in attributes) {
    				if (!attributes[attributeName]) {
    					continue;
    				}
    				stringifiedAttributes += '; ' + attributeName;
    				if (attributes[attributeName] === true) {
    					continue;
    				}

    				// Considers RFC 6265 section 5.2:
    				// ...
    				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
    				//     character:
    				// Consume the characters of the unparsed-attributes up to,
    				// not including, the first %x3B (";") character.
    				// ...
    				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    			}

    			return (document.cookie = key + '=' + value + stringifiedAttributes);
    		}

    		function get (key, json) {
    			if (typeof document === 'undefined') {
    				return;
    			}

    			var jar = {};
    			// To prevent the for loop in the first place assign an empty array
    			// in case there are no cookies at all.
    			var cookies = document.cookie ? document.cookie.split('; ') : [];
    			var i = 0;

    			for (; i < cookies.length; i++) {
    				var parts = cookies[i].split('=');
    				var cookie = parts.slice(1).join('=');

    				if (!json && cookie.charAt(0) === '"') {
    					cookie = cookie.slice(1, -1);
    				}

    				try {
    					var name = decode(parts[0]);
    					cookie = (converter.read || converter)(cookie, name) ||
    						decode(cookie);

    					if (json) {
    						try {
    							cookie = JSON.parse(cookie);
    						} catch (e) {}
    					}

    					jar[name] = cookie;

    					if (key === name) {
    						break;
    					}
    				} catch (e) {}
    			}

    			return key ? jar[key] : jar;
    		}

    		api.set = set;
    		api.get = function (key) {
    			return get(key, false /* read as raw */);
    		};
    		api.getJSON = function (key) {
    			return get(key, true /* read as json */);
    		};
    		api.remove = function (key, attributes) {
    			set(key, '', extend(attributes, {
    				expires: -1
    			}));
    		};

    		api.defaults = {};

    		api.withConverter = init;

    		return api;
    	}

    	return init(function () {});
    }));
    }(js_cookie, js_cookie.exports));

    var jsCookie = js_cookie.exports;

    /* MIT https://github.com/kenwheeler/cash */
    const doc = document, win = window, div = doc.createElement('div'), { filter, indexOf, map, push, reverse, slice, some, splice } = Array.prototype;
    const idRe = /^#[\w-]*$/, classRe = /^\.[\w-]*$/, htmlRe = /<.+>/, tagRe = /^\w+$/;
    // @require ./variables.ts
    function find(selector, context = doc) {
        return !isDocument(context) && !isElement(context)
            ? []
            : classRe.test(selector)
                ? context.getElementsByClassName(selector.slice(1))
                : tagRe.test(selector)
                    ? context.getElementsByTagName(selector)
                    : context.querySelectorAll(selector);
    }
    // @require ./find.ts
    // @require ./variables.ts
    class Cash {
        constructor(selector, context = doc) {
            if (!selector)
                return;
            if (isCash(selector))
                return selector;
            let eles = selector;
            if (isString(selector)) {
                const ctx = isCash(context) ? context[0] : context;
                eles = idRe.test(selector)
                    ? ctx.getElementById(selector.slice(1))
                    : htmlRe.test(selector)
                        ? parseHTML(selector)
                        : find(selector, ctx);
                if (!eles)
                    return;
            }
            else if (isFunction(selector)) {
                return this.ready(selector); //FIXME: `fn.ready` is not included in `core`, but it's actually a core functionality
            }
            if (eles.nodeType || eles === win)
                eles = [eles];
            this.length = eles.length;
            for (let i = 0, l = this.length; i < l; i++) {
                this[i] = eles[i];
            }
        }
        init(selector, context) {
            return new Cash(selector, context);
        }
    }
    const cash = Cash.prototype.init;
    cash.fn = cash.prototype = Cash.prototype; // Ensuring that `cash () instanceof cash`
    Cash.prototype.length = 0;
    Cash.prototype.splice = splice; // Ensuring a cash collection gets printed as array-like in Chrome's devtools
    if (typeof Symbol === 'function') {
        Cash.prototype[Symbol['iterator']] = Array.prototype[Symbol['iterator']];
    }
    Cash.prototype.get = function (index) {
        if (index === undefined)
            return slice.call(this);
        return this[index < 0 ? index + this.length : index];
    };
    Cash.prototype.eq = function (index) {
        return cash(this.get(index));
    };
    Cash.prototype.first = function () {
        return this.eq(0);
    };
    Cash.prototype.last = function () {
        return this.eq(-1);
    };
    Cash.prototype.map = function (callback) {
        return cash(map.call(this, (ele, i) => callback.call(ele, i, ele)));
    };
    Cash.prototype.slice = function () {
        return cash(slice.apply(this, arguments));
    };
    // @require ./cash.ts
    const dashAlphaRe = /-([a-z])/g;
    function camelCaseReplace(match, letter) {
        return letter.toUpperCase();
    }
    function camelCase(str) {
        return str.replace(dashAlphaRe, camelCaseReplace);
    }
    cash.camelCase = camelCase;
    function each(arr, callback) {
        for (let i = 0, l = arr.length; i < l; i++) {
            if (callback.call(arr[i], i, arr[i]) === false)
                break;
        }
    }
    cash.each = each;
    Cash.prototype.each = function (callback) {
        each(this, callback);
        return this;
    };
    Cash.prototype.removeProp = function (prop) {
        return this.each((i, ele) => { delete ele[prop]; });
    };
    // @require ./cash.ts
    function extend(target, ...objs) {
        const args = arguments, length = args.length;
        for (let i = (length < 2 ? 0 : 1); i < length; i++) {
            for (const key in args[i]) {
                target[key] = args[i][key];
            }
        }
        return target;
    }
    Cash.prototype.extend = function (plugins) {
        return extend(cash.fn, plugins);
    };
    cash.extend = extend;
    cash.guid = 1;
    // @require ./cash.ts
    function matches(ele, selector) {
        const matches = ele && (ele['matches'] || ele['webkitMatchesSelector'] || ele['mozMatchesSelector'] || ele['msMatchesSelector'] || ele['oMatchesSelector']);
        return !!matches && matches.call(ele, selector);
    }
    cash.matches = matches;
    // @require ./variables.ts
    function pluck(arr, prop, deep) {
        const plucked = [];
        for (let i = 0, l = arr.length; i < l; i++) {
            let val = arr[i][prop];
            while (val != null) {
                plucked.push(val);
                if (!deep)
                    break;
                val = val[prop];
            }
        }
        return plucked;
    }
    // @require ./cash.ts
    function isCash(x) {
        return x instanceof Cash;
    }
    function isWindow(x) {
        return !!x && x === x.window;
    }
    function isDocument(x) {
        return !!x && x.nodeType === 9;
    }
    function isElement(x) {
        return !!x && x.nodeType === 1;
    }
    function isFunction(x) {
        return typeof x === 'function';
    }
    function isString(x) {
        return typeof x === 'string';
    }
    function isNumeric(x) {
        return !isNaN(parseFloat(x)) && isFinite(x);
    }
    const { isArray } = Array;
    cash.isWindow = isWindow;
    cash.isFunction = isFunction;
    cash.isString = isString;
    cash.isNumeric = isNumeric;
    cash.isArray = isArray;
    Cash.prototype.prop = function (prop, value) {
        if (!prop)
            return;
        if (isString(prop)) {
            if (arguments.length < 2)
                return this[0] && this[0][prop];
            return this.each((i, ele) => { ele[prop] = value; });
        }
        for (const key in prop) {
            this.prop(key, prop[key]);
        }
        return this;
    };
    // @require ./matches.ts
    // @require ./type_checking.ts
    function getCompareFunction(comparator) {
        return isString(comparator)
            ? (i, ele) => matches(ele, comparator)
            : isFunction(comparator)
                ? comparator
                : isCash(comparator)
                    ? (i, ele) => comparator.is(ele)
                    : (i, ele) => ele === comparator;
    }
    Cash.prototype.filter = function (comparator) {
        if (!comparator)
            return cash();
        const compare = getCompareFunction(comparator);
        return cash(filter.call(this, (ele, i) => compare.call(ele, i, ele)));
    };
    // @require collection/filter.ts
    function filtered(collection, comparator) {
        return !comparator || !collection.length ? collection : collection.filter(comparator);
    }
    // @require ./type_checking.ts
    const splitValuesRe = /\S+/g;
    function getSplitValues(str) {
        return isString(str) ? str.match(splitValuesRe) || [] : [];
    }
    Cash.prototype.hasClass = function (cls) {
        return cls && some.call(this, (ele) => ele.classList.contains(cls));
    };
    Cash.prototype.removeAttr = function (attr) {
        const attrs = getSplitValues(attr);
        if (!attrs.length)
            return this;
        return this.each((i, ele) => {
            each(attrs, (i, a) => {
                ele.removeAttribute(a);
            });
        });
    };
    function attr(attr, value) {
        if (!attr)
            return;
        if (isString(attr)) {
            if (arguments.length < 2) {
                if (!this[0])
                    return;
                const value = this[0].getAttribute(attr);
                return value === null ? undefined : value;
            }
            if (value === undefined)
                return this;
            if (value === null)
                return this.removeAttr(attr);
            return this.each((i, ele) => { ele.setAttribute(attr, value); });
        }
        for (const key in attr) {
            this.attr(key, attr[key]);
        }
        return this;
    }
    Cash.prototype.attr = attr;
    Cash.prototype.toggleClass = function (cls, force) {
        const classes = getSplitValues(cls), isForce = (force !== undefined);
        if (!classes.length)
            return this;
        return this.each((i, ele) => {
            each(classes, (i, c) => {
                if (isForce) {
                    force ? ele.classList.add(c) : ele.classList.remove(c);
                }
                else {
                    ele.classList.toggle(c);
                }
            });
        });
    };
    Cash.prototype.addClass = function (cls) {
        return this.toggleClass(cls, true);
    };
    Cash.prototype.removeClass = function (cls) {
        return !arguments.length ? this.attr('class', '') : this.toggleClass(cls, false);
    };
    // @optional ./add_class.ts
    // @optional ./attr.ts
    // @optional ./has_class.ts
    // @optional ./prop.ts
    // @optional ./remove_attr.ts
    // @optional ./remove_class.ts
    // @optional ./remove_prop.ts
    // @optional ./toggle_class.ts
    // @require ./cash.ts
    // @require ./variables
    function unique(arr) {
        return arr.length > 1 ? filter.call(arr, (item, index, self) => indexOf.call(self, item) === index) : arr;
    }
    cash.unique = unique;
    Cash.prototype.add = function (selector, context) {
        return cash(unique(this.get().concat(cash(selector, context).get())));
    };
    // @require core/type_checking.ts
    // @require core/variables.ts
    function computeStyle(ele, prop, isVariable) {
        if (!isElement(ele) || !prop)
            return;
        const style = win.getComputedStyle(ele, null);
        return prop ? (isVariable ? style.getPropertyValue(prop) || undefined : style[prop]) : style;
    }
    // @require ./compute_style.ts
    function computeStyleInt(ele, prop) {
        return parseInt(computeStyle(ele, prop), 10) || 0;
    }
    const cssVariableRe = /^--/;
    // @require ./variables.ts
    function isCSSVariable(prop) {
        return cssVariableRe.test(prop);
    }
    // @require core/camel_case.ts
    // @require core/cash.ts
    // @require core/each.ts
    // @require core/variables.ts
    // @require ./is_css_variable.ts
    const prefixedProps = {}, { style } = div, vendorsPrefixes = ['webkit', 'moz', 'ms', 'o'];
    function getPrefixedProp(prop, isVariable = isCSSVariable(prop)) {
        if (isVariable)
            return prop;
        if (!prefixedProps[prop]) {
            const propCC = camelCase(prop), propUC = `${propCC.charAt(0).toUpperCase()}${propCC.slice(1)}`, props = (`${propCC} ${vendorsPrefixes.join(`${propUC} `)}${propUC}`).split(' ');
            each(props, (i, p) => {
                if (p in style) {
                    prefixedProps[prop] = p;
                    return false;
                }
            });
        }
        return prefixedProps[prop];
    }
    ;
    cash.prefixedProp = getPrefixedProp;
    // @require core/type_checking.ts
    // @require ./is_css_variable.ts
    const numericProps = {
        animationIterationCount: true,
        columnCount: true,
        flexGrow: true,
        flexShrink: true,
        fontWeight: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        widows: true,
        zIndex: true
    };
    function getSuffixedValue(prop, value, isVariable = isCSSVariable(prop)) {
        return !isVariable && !numericProps[prop] && isNumeric(value) ? `${value}px` : value;
    }
    function css(prop, value) {
        if (isString(prop)) {
            const isVariable = isCSSVariable(prop);
            prop = getPrefixedProp(prop, isVariable);
            if (arguments.length < 2)
                return this[0] && computeStyle(this[0], prop, isVariable);
            if (!prop)
                return this;
            value = getSuffixedValue(prop, value, isVariable);
            return this.each((i, ele) => {
                if (!isElement(ele))
                    return;
                if (isVariable) {
                    ele.style.setProperty(prop, value); //TSC
                }
                else {
                    ele.style[prop] = value; //TSC
                }
            });
        }
        for (const key in prop) {
            this.css(key, prop[key]);
        }
        return this;
    }
    ;
    Cash.prototype.css = css;
    // @optional ./css.ts
    // @require core/camel_case.ts
    function getData(ele, key) {
        const value = ele.dataset ? ele.dataset[key] || ele.dataset[camelCase(key)] : ele.getAttribute(`data-${key}`);
        try {
            return JSON.parse(value);
        }
        catch (_a) { }
        return value;
    }
    // @require core/camel_case.ts
    function setData(ele, key, value) {
        try {
            value = JSON.stringify(value);
        }
        catch (_a) { }
        if (ele.dataset) {
            ele.dataset[camelCase(key)] = value;
        }
        else {
            ele.setAttribute(`data-${key}`, value);
        }
    }
    const dataAttributeRe = /^data-(.+)/;
    function data(name, value) {
        if (!name) {
            if (!this[0])
                return;
            const datas = {};
            each(this[0].attributes, (i, attr) => {
                const match = attr.name.match(dataAttributeRe);
                if (!match)
                    return;
                datas[match[1]] = this.data(match[1]);
            });
            return datas;
        }
        if (isString(name)) {
            if (value === undefined)
                return this[0] && getData(this[0], name);
            return this.each((i, ele) => setData(ele, name, value));
        }
        for (const key in name) {
            this.data(key, name[key]);
        }
        return this;
    }
    Cash.prototype.data = data;
    // @optional ./data.ts
    // @require css/helpers/compute_style_int.ts
    function getExtraSpace(ele, xAxis) {
        return computeStyleInt(ele, `border${xAxis ? 'Left' : 'Top'}Width`) + computeStyleInt(ele, `padding${xAxis ? 'Left' : 'Top'}`) + computeStyleInt(ele, `padding${xAxis ? 'Right' : 'Bottom'}`) + computeStyleInt(ele, `border${xAxis ? 'Right' : 'Bottom'}Width`);
    }
    each(['Width', 'Height'], (i, prop) => {
        Cash.prototype[`inner${prop}`] = function () {
            if (!this[0])
                return;
            if (isWindow(this[0]))
                return win[`inner${prop}`];
            return this[0][`client${prop}`];
        };
    });
    each(['width', 'height'], (index, prop) => {
        Cash.prototype[prop] = function (value) {
            if (!this[0])
                return value === undefined ? undefined : this;
            if (!arguments.length) {
                if (isWindow(this[0]))
                    return this[0][camelCase(`outer-${prop}`)];
                return this[0].getBoundingClientRect()[prop] - getExtraSpace(this[0], !index);
            }
            const valueNumber = parseInt(value, 10); //TSC
            return this.each((i, ele) => {
                if (!isElement(ele))
                    return;
                const boxSizing = computeStyle(ele, 'boxSizing');
                ele.style[prop] = getSuffixedValue(prop, valueNumber + (boxSizing === 'border-box' ? getExtraSpace(ele, !index) : 0));
            });
        };
    });
    each(['Width', 'Height'], (index, prop) => {
        Cash.prototype[`outer${prop}`] = function (includeMargins) {
            if (!this[0])
                return;
            if (isWindow(this[0]))
                return win[`outer${prop}`];
            return this[0][`offset${prop}`] + (includeMargins ? computeStyleInt(this[0], `margin${!index ? 'Left' : 'Top'}`) + computeStyleInt(this[0], `margin${!index ? 'Right' : 'Bottom'}`) : 0);
        };
    });
    // @optional ./inner.ts
    // @optional ./normal.ts
    // @optional ./outer.ts
    // @require css/helpers/compute_style.ts
    const defaultDisplay = {};
    function getDefaultDisplay(tagName) {
        if (defaultDisplay[tagName])
            return defaultDisplay[tagName];
        const ele = doc.createElement(tagName);
        doc.body.appendChild(ele);
        const display = computeStyle(ele, 'display');
        doc.body.removeChild(ele);
        return defaultDisplay[tagName] = display !== 'none' ? display : 'block';
    }
    // @require css/helpers/compute_style.ts
    function isHidden(ele) {
        return computeStyle(ele, 'display') === 'none';
    }
    Cash.prototype.toggle = function (force) {
        return this.each((i, ele) => {
            const show = force !== undefined ? force : isHidden(ele);
            if (show) {
                ele.style.display = '';
                if (isHidden(ele)) {
                    ele.style.display = getDefaultDisplay(ele.tagName);
                }
            }
            else {
                ele.style.display = 'none';
            }
        });
    };
    Cash.prototype.hide = function () {
        return this.toggle(false);
    };
    Cash.prototype.show = function () {
        return this.toggle(true);
    };
    // @optional ./hide.ts
    // @optional ./show.ts
    // @optional ./toggle.ts
    function hasNamespaces(ns1, ns2) {
        return !ns2 || !some.call(ns2, (ns) => ns1.indexOf(ns) < 0);
    }
    const eventsNamespace = '__cashEvents', eventsNamespacesSeparator = '.', eventsFocus = { focus: 'focusin', blur: 'focusout' }, eventsHover = { mouseenter: 'mouseover', mouseleave: 'mouseout' }, eventsMouseRe = /^(?:mouse|pointer|contextmenu|drag|drop|click|dblclick)/i;
    // @require ./variables.ts
    function getEventNameBubbling(name) {
        return eventsHover[name] || eventsFocus[name] || name;
    }
    // @require ./variables.ts
    function getEventsCache(ele) {
        return ele[eventsNamespace] = (ele[eventsNamespace] || {});
    }
    // @require core/guid.ts
    // @require events/helpers/get_events_cache.ts
    function addEvent(ele, name, namespaces, selector, callback) {
        callback.guid = callback.guid || cash.guid++;
        const eventCache = getEventsCache(ele);
        eventCache[name] = (eventCache[name] || []);
        eventCache[name].push([namespaces, selector, callback]);
        ele.addEventListener(name, callback);
    }
    // @require ./variables.ts
    function parseEventName(eventName) {
        const parts = eventName.split(eventsNamespacesSeparator);
        return [parts[0], parts.slice(1).sort()]; // [name, namespace[]]
    }
    // @require ./get_events_cache.ts
    // @require ./has_namespaces.ts
    // @require ./parse_event_name.ts
    function removeEvent(ele, name, namespaces, selector, callback) {
        const cache = getEventsCache(ele);
        if (!name) {
            for (name in cache) {
                removeEvent(ele, name, namespaces, selector, callback);
            }
            delete ele[eventsNamespace];
        }
        else if (cache[name]) {
            cache[name] = cache[name].filter(([ns, sel, cb]) => {
                if ((callback && cb.guid !== callback.guid) || !hasNamespaces(ns, namespaces) || (selector && selector !== sel))
                    return true;
                ele.removeEventListener(name, cb);
            });
        }
    }
    Cash.prototype.off = function (eventFullName, selector, callback) {
        if (eventFullName === undefined) {
            this.each((i, ele) => removeEvent(ele));
        }
        else {
            if (isFunction(selector)) {
                callback = selector;
                selector = '';
            }
            each(getSplitValues(eventFullName), (i, eventFullName) => {
                const [name, namespaces] = parseEventName(getEventNameBubbling(eventFullName));
                this.each((i, ele) => removeEvent(ele, name, namespaces, selector, callback)); //TSC
            });
        }
        return this;
    };
    function on(eventFullName, selector, callback, _one) {
        if (!isString(eventFullName)) {
            for (const key in eventFullName) {
                this.on(key, selector, eventFullName[key]);
            }
            return this;
        }
        if (isFunction(selector)) {
            callback = selector;
            selector = '';
        }
        each(getSplitValues(eventFullName), (i, eventFullName) => {
            const [name, namespaces] = parseEventName(getEventNameBubbling(eventFullName));
            this.each((i, ele) => {
                const finalCallback = function (event) {
                    if (event.namespace && !hasNamespaces(namespaces, event.namespace.split(eventsNamespacesSeparator)))
                        return;
                    let thisArg = ele;
                    if (selector) {
                        let target = event.target;
                        while (!matches(target, selector)) { //TSC
                            if (target === ele)
                                return;
                            target = target.parentNode;
                            if (!target)
                                return;
                        }
                        thisArg = target;
                        event.__delegate = true;
                    }
                    if (event.__delegate) {
                        Object.defineProperty(event, 'currentTarget', {
                            configurable: true,
                            get() {
                                return thisArg;
                            }
                        });
                    }
                    const returnValue = callback.call(thisArg, event, event.data); //TSC
                    if (_one) {
                        removeEvent(ele, name, namespaces, selector, finalCallback); //TSC
                    }
                    if (returnValue === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                };
                finalCallback.guid = callback['guid'] = (callback['guid'] || cash.guid++); //TSC
                addEvent(ele, name, namespaces, selector, finalCallback); //TSC
            });
        });
        return this;
    }
    Cash.prototype.on = on;
    function one(eventFullName, selector, callback) {
        return this.on(eventFullName, selector, callback, true); //TSC
    }
    ;
    Cash.prototype.one = one;
    Cash.prototype.ready = function (callback) {
        const finalCallback = () => callback(cash);
        if (doc.readyState !== 'loading') {
            setTimeout(finalCallback);
        }
        else {
            doc.addEventListener('DOMContentLoaded', finalCallback);
        }
        return this;
    };
    Cash.prototype.trigger = function (eventFullName, data) {
        let evt;
        if (isString(eventFullName)) {
            const [name, namespaces] = parseEventName(eventFullName), type = eventsMouseRe.test(name) ? 'MouseEvents' : 'HTMLEvents';
            evt = doc.createEvent(type);
            evt.initEvent(name, true, true);
            evt.namespace = namespaces.join(eventsNamespacesSeparator);
        }
        else {
            evt = eventFullName;
        }
        evt.data = data;
        const isEventFocus = (evt.type in eventsFocus);
        return this.each((i, ele) => {
            if (isEventFocus && isFunction(ele[evt.type])) {
                ele[evt.type]();
            }
            else {
                ele.dispatchEvent(evt);
            }
        });
    };
    // @optional ./off.ts
    // @optional ./on.ts
    // @optional ./one.ts
    // @optional ./ready.ts
    // @optional ./trigger.ts
    // @require core/pluck.ts
    // @require core/variables.ts
    function getValue(ele) {
        if (ele.multiple && ele.options)
            return pluck(filter.call(ele.options, option => option.selected && !option.disabled && !option.parentNode.disabled), 'value');
        return ele.value || '';
    }
    const queryEncodeSpaceRe = /%20/g;
    function queryEncode(prop, value) {
        return `&${encodeURIComponent(prop)}=${encodeURIComponent(value).replace(queryEncodeSpaceRe, '+')}`;
    }
    // @require core/cash.ts
    // @require core/each.ts
    // @require core/type_checking.ts
    // @require ./helpers/get_value.ts
    // @require ./helpers/query_encode.ts
    const skippableRe = /file|reset|submit|button|image/i, checkableRe = /radio|checkbox/i;
    Cash.prototype.serialize = function () {
        let query = '';
        this.each((i, ele) => {
            each(ele.elements || [ele], (i, ele) => {
                if (ele.disabled || !ele.name || ele.tagName === 'FIELDSET' || skippableRe.test(ele.type) || (checkableRe.test(ele.type) && !ele.checked))
                    return;
                const value = getValue(ele);
                if (value === undefined)
                    return;
                const values = isArray(value) ? value : [value];
                each(values, (i, value) => {
                    query += queryEncode(ele.name, value);
                });
            });
        });
        return query.substr(1);
    };
    function val(value) {
        if (value === undefined)
            return this[0] && getValue(this[0]);
        return this.each((i, ele) => {
            if (ele.tagName === 'SELECT') {
                const eleValue = isArray(value) ? value : (value === null ? [] : [value]);
                each(ele.options, (i, option) => {
                    option.selected = eleValue.indexOf(option.value) >= 0;
                });
            }
            else {
                ele.value = value === null ? '' : value;
            }
        });
    }
    Cash.prototype.val = val;
    Cash.prototype.clone = function () {
        return this.map((i, ele) => ele.cloneNode(true));
    };
    Cash.prototype.detach = function () {
        return this.each((i, ele) => {
            if (ele.parentNode) {
                ele.parentNode.removeChild(ele);
            }
        });
    };
    // @require ./cash.ts
    // @require ./variables.ts
    // @require ./type_checking.ts
    // @require collection/get.ts
    // @require manipulation/detach.ts
    const fragmentRe = /^\s*<(\w+)[^>]*>/, singleTagRe = /^\s*<(\w+)\s*\/?>(?:<\/\1>)?\s*$/;
    let containers;
    function initContainers() {
        if (containers)
            return;
        const table = doc.createElement('table'), tr = doc.createElement('tr');
        containers = {
            '*': div,
            tr: doc.createElement('tbody'),
            td: tr,
            th: tr,
            thead: table,
            tbody: table,
            tfoot: table,
        };
    }
    function parseHTML(html) {
        initContainers();
        if (!isString(html))
            return [];
        if (singleTagRe.test(html))
            return [doc.createElement(RegExp.$1)];
        const fragment = fragmentRe.test(html) && RegExp.$1, container = containers[fragment] || containers['*'];
        container.innerHTML = html;
        return cash(container.childNodes).detach().get();
    }
    cash.parseHTML = parseHTML;
    Cash.prototype.empty = function () {
        return this.each((i, ele) => {
            while (ele.firstChild) {
                ele.removeChild(ele.firstChild);
            }
        });
    };
    function html(html) {
        if (html === undefined)
            return this[0] && this[0].innerHTML;
        return this.each((i, ele) => { ele.innerHTML = html; });
    }
    Cash.prototype.html = html;
    Cash.prototype.remove = function () {
        return this.detach().off();
    };
    function text(text) {
        if (text === undefined)
            return this[0] ? this[0].textContent : '';
        return this.each((i, ele) => { ele.textContent = text; });
    }
    ;
    Cash.prototype.text = text;
    Cash.prototype.unwrap = function () {
        this.parent().each((i, ele) => {
            const $ele = cash(ele);
            $ele.replaceWith($ele.children());
        });
        return this;
    };
    // @require core/cash.ts
    // @require core/variables.ts
    const docEle = doc.documentElement;
    Cash.prototype.offset = function () {
        const ele = this[0];
        if (!ele)
            return;
        const rect = ele.getBoundingClientRect();
        return {
            top: rect.top + win.pageYOffset - docEle.clientTop,
            left: rect.left + win.pageXOffset - docEle.clientLeft
        };
    };
    Cash.prototype.offsetParent = function () {
        return cash(this[0] && this[0].offsetParent);
    };
    Cash.prototype.position = function () {
        const ele = this[0];
        if (!ele)
            return;
        return {
            left: ele.offsetLeft,
            top: ele.offsetTop
        };
    };
    Cash.prototype.children = function (comparator) {
        const result = [];
        this.each((i, ele) => {
            push.apply(result, ele.children);
        });
        return filtered(cash(unique(result)), comparator);
    };
    Cash.prototype.contents = function () {
        const result = [];
        this.each((i, ele) => {
            push.apply(result, ele.tagName === 'IFRAME' ? [ele.contentDocument] : ele.childNodes);
        });
        return cash(unique(result));
    };
    Cash.prototype.find = function (selector) {
        const result = [];
        for (let i = 0, l = this.length; i < l; i++) {
            const found = find(selector, this[i]);
            if (found.length) {
                push.apply(result, found);
            }
        }
        return cash(unique(result));
    };
    // @require collection/filter.ts
    // @require traversal/find.ts
    const scriptTypeRe = /^$|^module$|\/(?:java|ecma)script/i, HTMLCDATARe = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function evalScripts(node) {
        const collection = cash(node);
        collection.filter('script').add(collection.find('script')).each((i, ele) => {
            if (!ele.src && scriptTypeRe.test(ele.type)) { // The script type is supported
                if (ele.ownerDocument.documentElement.contains(ele)) { // The element is attached to the DOM // Using `documentElement` for broader browser support
                    eval(ele.textContent.replace(HTMLCDATARe, ''));
                }
            }
        });
    }
    // @require ./eval_scripts.ts
    function insertElement(anchor, child, prepend, prependTarget) {
        if (prepend) {
            anchor.insertBefore(child, prependTarget);
        }
        else {
            anchor.appendChild(child);
        }
        evalScripts(child);
    }
    // @require core/each.ts
    // @require core/type_checking.ts
    // @require ./insert_element.ts
    function insertContent(parent, child, prepend) {
        each(parent, (index, parentEle) => {
            each(child, (i, childEle) => {
                insertElement(parentEle, !index ? childEle : childEle.cloneNode(true), prepend, prepend && parentEle.firstChild);
            });
        });
    }
    Cash.prototype.append = function () {
        each(arguments, (i, selector) => {
            insertContent(this, cash(selector));
        });
        return this;
    };
    Cash.prototype.appendTo = function (selector) {
        insertContent(cash(selector), this);
        return this;
    };
    Cash.prototype.insertAfter = function (selector) {
        cash(selector).each((index, ele) => {
            const parent = ele.parentNode;
            if (parent) {
                this.each((i, e) => {
                    insertElement(parent, !index ? e : e.cloneNode(true), true, ele.nextSibling);
                });
            }
        });
        return this;
    };
    Cash.prototype.after = function () {
        each(reverse.apply(arguments), (i, selector) => {
            reverse.apply(cash(selector).slice()).insertAfter(this);
        });
        return this;
    };
    Cash.prototype.insertBefore = function (selector) {
        cash(selector).each((index, ele) => {
            const parent = ele.parentNode;
            if (parent) {
                this.each((i, e) => {
                    insertElement(parent, !index ? e : e.cloneNode(true), true, ele);
                });
            }
        });
        return this;
    };
    Cash.prototype.before = function () {
        each(arguments, (i, selector) => {
            cash(selector).insertBefore(this);
        });
        return this;
    };
    Cash.prototype.prepend = function () {
        each(arguments, (i, selector) => {
            insertContent(this, cash(selector), true);
        });
        return this;
    };
    Cash.prototype.prependTo = function (selector) {
        insertContent(cash(selector), reverse.apply(this.slice()), true);
        return this;
    };
    Cash.prototype.replaceWith = function (selector) {
        return this.before(selector).remove();
    };
    Cash.prototype.replaceAll = function (selector) {
        cash(selector).replaceWith(this);
        return this;
    };
    Cash.prototype.wrapAll = function (selector) {
        if (this[0]) {
            const structure = cash(selector);
            this.first().before(structure);
            let wrapper = structure[0];
            while (wrapper.children.length)
                wrapper = wrapper.firstElementChild;
            this.appendTo(wrapper);
        }
        return this;
    };
    Cash.prototype.wrap = function (selector) {
        return this.each((index, ele) => {
            const wrapper = cash(selector)[0];
            cash(ele).wrapAll(!index ? wrapper : wrapper.cloneNode(true));
        });
    };
    Cash.prototype.wrapInner = function (selector) {
        return this.each((i, ele) => {
            const $ele = cash(ele), contents = $ele.contents();
            contents.length ? contents.wrapAll(selector) : $ele.append(selector);
        });
    };
    Cash.prototype.has = function (selector) {
        const comparator = isString(selector)
            ? (i, ele) => !!find(selector, ele).length
            : (i, ele) => ele.contains(selector);
        return this.filter(comparator);
    };
    Cash.prototype.is = function (comparator) {
        if (!comparator || !this[0])
            return false;
        const compare = getCompareFunction(comparator);
        let check = false;
        this.each((i, ele) => {
            check = compare.call(ele, i, ele);
            return !check;
        });
        return check;
    };
    Cash.prototype.next = function (comparator, _all) {
        return filtered(cash(unique(pluck(this, 'nextElementSibling', _all))), comparator);
    };
    Cash.prototype.nextAll = function (comparator) {
        return this.next(comparator, true);
    };
    Cash.prototype.not = function (comparator) {
        if (!comparator || !this[0])
            return this;
        const compare = getCompareFunction(comparator);
        return this.filter((i, ele) => !compare.call(ele, i, ele));
    };
    Cash.prototype.parent = function (comparator) {
        return filtered(cash(unique(pluck(this, 'parentNode'))), comparator);
    };
    Cash.prototype.index = function (selector) {
        const child = selector ? cash(selector)[0] : this[0], collection = selector ? this : cash(child).parent().children();
        return indexOf.call(collection, child);
    };
    Cash.prototype.closest = function (comparator) {
        if (!comparator || !this[0])
            return cash();
        const filtered = this.filter(comparator);
        if (filtered.length)
            return filtered;
        return this.parent().closest(comparator);
    };
    Cash.prototype.parents = function (comparator) {
        return filtered(cash(unique(pluck(this, 'parentElement', true))), comparator);
    };
    Cash.prototype.prev = function (comparator, _all) {
        return filtered(cash(unique(pluck(this, 'previousElementSibling', _all))), comparator);
    };
    Cash.prototype.prevAll = function (comparator) {
        return this.prev(comparator, true);
    };
    Cash.prototype.siblings = function (comparator) {
        const result = [];
        this.each((i, ele) => {
            push.apply(result, cash(ele).parent().children((ci, child) => child !== ele));
        });
        return filtered(cash(unique(result)), comparator);
    };

    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function (obj) {
          return typeof obj;
        };
      } else {
        _typeof = function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(source, true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(source).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

        return arr2;
      }
    }

    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }

    // tslint:disable variable-name ban-types no-empty
    var levels = ['error', 'warn', 'info', 'debug', 'trace'];

    var Log =
    /*#__PURE__*/
    function () {
      function Log()
      /* NONE */
      {
        var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, Log);

        this.console = window.console;
        this.level = level;
        this.prefix = prefix;
        this.buildLogFunctions();
      }

      _createClass(Log, [{
        key: "shouldLog",
        value: function shouldLog(level) {
          return level <= this.level;
        }
        /**
         * Sets the logging level
         *
         * @param level logging level to change the logger into
         */

      }, {
        key: "setLoggingLevel",
        value: function setLoggingLevel(level) {
          this.level = typeof level === 'string' ? levels.indexOf(level.toLowerCase()) + 1 : level || 0
          /* NONE */
          ;
          this.buildLogFunctions();
        }
      }, {
        key: "getLoggingLevel",
        value: function getLoggingLevel() {
          return this.level;
        }
        /**
         *
         * sets the logging level so that all log lines will be logged with as such
         *
         * `[INFO]({PREFIX}): ...`
         *
         * @param {string} prefix logging prefix
         */

      }, {
        key: "setPrefix",
        value: function setPrefix(prefix) {
          this.prefix = prefix;
          this.buildLogFunctions();
        }
      }, {
        key: "getPrefix",
        value: function getPrefix() {
          return this.prefix;
        }
      }, {
        key: "buildLogFunctions",
        value: function buildLogFunctions() {
          var _this = this;

          levels.forEach(function (value, i) {
            var level = levels[i];
            _this[level] = _this.shouldLog(i + 1) ? _this.getLogFn(level) : function () {};
          });
        }
      }, {
        key: "getLogFn",
        value: function getLogFn(consoleMethod) {
          return Function.prototype.bind.call(this.console.log, this.console, "[".concat(consoleMethod.toUpperCase(), "]").concat(this.prefix ? '(' + this.prefix + ')' : '', ":"));
        }
      }]);

      return Log;
    }();

    function setLoggingLevel(level) {
      Logger.setLoggingLevel(level);
    }
    function getLoggingLevel() {
      return Logger.getLoggingLevel();
    }
    var Logger = new Log();

    var CustomEvents;

    (function (CustomEvents) {
      CustomEvents["OnEventSend"] = "interactions:onEventSend";
      CustomEvents["OnBeforeEventSend"] = "interactions:onBeforeEventSend";
      CustomEvents["OnException"] = "interactions:onException";
      CustomEvents["OnPageMatchStatusUpdated"] = "interactions:onPageMatchStatusUpdated";
      CustomEvents["OnInit"] = "interactions:onInit";
      CustomEvents["OnInitSitemap"] = "interactions:onInitSitemap";
      CustomEvents["OnShutDown"] = "interactions:onShutDown";
      CustomEvents["OnSetAnonymousId"] = "interactions:onSetAnonymousId";
      CustomEvents["OnResetAnonymousId"] = "interactions:onResetAnonymousId";
      CustomEvents["OnClearPersistedIdentities"] = "interactions:onClearPersistedIdentities";
      CustomEvents["OnConsentRevoke"] = "interactions:onConsentRevoke";
    })(CustomEvents || (CustomEvents = {}));

    var SITEMAP_REINIT = "sitemap_reinit"; // Channel

    var DEFAULT_CHANNEL = "Web";
    var IDENTITY_COOKIE_PREFIX = '_sfid';
    var STORAGE_INFO = {
      anonymousId: {
        ids: {// No local storage ID for visitor cookie
        },
        timeoutDays: 730 // 2 years

      }
    };

    function sha1 (r) {
      var o,
          e,
          t,
          f,
          n,
          a = [],
          c = [e = 1732584193, t = 4023233417, ~e, ~t, 3285377520],
          u = [],
          d = unescape(encodeURI(r)) + "",
          g = d.length;

      for (u[r = --g / 4 + 2 | 15] = 8 * g; ~g;) {
        u[g >> 2] |= d.charCodeAt(g) << 8 * ~g--;
      }

      for (o = g = 0; o < r; o += 16) {
        for (e = c; g < 80; e = [e[4] + (a[g] = g < 16 ? ~~u[o + g] : 2 * d | d < 0) + 1518500249 + [t & f | ~t & n, d = 341275144 + (t ^ f ^ n), 882459459 + (t & f | t & n | f & n), d + 1535694389][g++ / 5 >> 2] + ((d = e[0]) << 5 | d >>> 27), d, t << 30 | t >>> 2, f, n]) {
          d = a[g - 3] ^ a[g - 8] ^ a[g - 14] ^ a[g - 16], t = e[1], f = e[2], n = e[3];
        }

        for (g = 5; g;) {
          c[--g] += e[g];
        }
      }

      for (d = ""; g < 40;) {
        d += (c[g >> 3] >> 4 * (7 - g++) & 15).toString(16);
      }

      return d;
    }

    //
    //      here's the situation - the sha1 package contains both an ES6 module (index.mjs) and a CommonJS
    //      module (index.js) which leads to the following behaviors:
    //      * typescript compilation - the MJS version is resolved which uses `export default sha1`
    //      * jest transformation - the CJS version is resolved which uses `module.exports = sha1`
    //
    //      i'm not sure if this can be worked around via config or it's just a weird edge case around
    //      the transition towards ES6 compliant support in libraries.

    var sha1$1 = sha1.default ? sha1.default : sha1;

    /**
     * A sha1 of the current account, dataset and cookieDomainHash joined with periods
     */

    var cookieHash;
    var cookieDomain = window.location.hostname;

    var generateCookieDomainHash = function generateCookieDomainHash() {
      return sha1$1(cookieDomain + '/').slice(0, 4); // 4 hexits = 16 bits
    }; // See convertMcisVisitorToSalesforceIdentity in MCIS module


    var getCookieDomain = function getCookieDomain() {
      return cookieDomain;
    };
    var setCookieDomain = function setCookieDomain(domain) {
      cookieDomain = domain;
      setCookieHash();
    };
    var setCookieHash = function setCookieHash() {
      cookieHash = sha1$1("".concat(generateCookieDomainHash())).slice(0, 4);
    };
    var getCookieName = function getCookieName() {
      return "".concat(IDENTITY_COOKIE_PREFIX, "_").concat(cookieHash);
    };

    var Cookie = jsCookie;

    var read = function read() {
      return Cookie.getJSON(getCookieName());
    };

    var write = function write(cookieValue, daysToExpire) {
      Cookie.set(getCookieName(), cookieValue, {
        expires: daysToExpire,
        domain: getCookieDomain()
      });
    };

    var remove = function remove(options) {
      Cookie.remove(getCookieName(), options);
    };

    var writeIdentityCookie = function writeIdentityCookie(identityCookie) {
      Cookies.write(identityCookie, STORAGE_INFO.anonymousId.timeoutDays);
    };

    var writeAnonymousIdToCookie = function writeAnonymousIdToCookie(anonymousId) {
      writeIdentityCookie(_objectSpread2({}, read(), {
        anonymousId: anonymousId
      }));
    };
    var writeConsentsToCookie = function writeConsentsToCookie(consents) {
      writeIdentityCookie(_objectSpread2({}, read(), {
        consents: consents
      }));
    };
    var Cookies = {
      read: read,
      write: write,
      remove: remove
    };

    // The only thing we have to fear is fear itself, and:
    var spiders = [/bot/i, /spider/i, /facebookexternalhit/i, /simplepie/i, /yahooseeker/i, /embedly/i, /quora link preview/i, /outbrain/i, /vkshare/i, /monit/i, /Pingability/i, /Monitoring/i, /WinHttpRequest/i, /Apache-HttpClient/i, /getprismatic.com/i, /python-requests/i, /Twurly/i, /yandex/i, /browserproxy/i, /crawler/i, /Qwantify/i, /Yahoo! Slurp/i, /pinterest/i, /Tumblr\/14.0.835.186/i, /Tumblr Agent 14.0/i];
    var isSpider = function isSpider(ua) {
      return spiders.some(function (spider) {
        return spider.test(ua);
      });
    };
    var userAgentIsRobot = function userAgentIsRobot() {
      return isSpider(getUserAgent());
    };
    var getUserAgent = function getUserAgent() {
      return window.navigator.userAgent || '';
    };
    var getNavigatorPlatform = function getNavigatorPlatform() {
      return window.navigator.platform || '';
    };
    var isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') > -1 && navigator.userAgent && navigator.userAgent.indexOf('CriOS') == -1 && navigator.userAgent.indexOf('FxiOS') == -1;

    /* resolved locally */
    /**
     * generateUuid
     * @return {String} a pseudo-unique ID to fingerprint a user.
     */

    function generateUuid() {
      var dateTime = new Date().getTime;
      var raw = getUserAgent() + getNavigatorPlatform() + dateTime + JSON.stringify({}) + Math.random();
      return sha1$1(raw).slice(0, 16);
    }

    // export interface AnonymousIdentity {
    //     id?: string;
    // }

    var anonymousId = "";
    document.addEventListener(CustomEvents.OnResetAnonymousId, function () {
      Cookies.remove(); // TODO: probably need to pass options here?

      loadAnonymousIdentity();
    });
    document.addEventListener(CustomEvents.OnSetAnonymousId, function (event) {
      if (event.detail && event.detail.newAnonymousId) {
        writeAnonymousIdToCookie(event.detail.newAnonymousId);
      }
    });
    var getAnonymousId = function getAnonymousId() {
      return anonymousId;
    };
    var setAnonymousId = function setAnonymousId(newAnonymousId) {
      anonymousId = newAnonymousId;

      if (newAnonymousId) {
        document.dispatchEvent(new CustomEvent(CustomEvents.OnSetAnonymousId, {
          detail: {
            newAnonymousId: newAnonymousId
          }
        }));
      } else {
        Logger.warn('Attempted to setAnonymousId but not parameter is undefined');
      }
    };
    var resetAnonymousId = function resetAnonymousId() {
      document.dispatchEvent(new CustomEvent(CustomEvents.OnResetAnonymousId));
    };
    var clearPersistedIdentities = function clearPersistedIdentities() {
      document.dispatchEvent(new CustomEvent(CustomEvents.OnClearPersistedIdentities));
    };
    var loadAnonymousIdentity = function loadAnonymousIdentity() {
      if (!identityCookieExists()) {
        setAnonymousId(generateUuid());
        Logger.debug("Created new anonymous identity record. anonymousId: ".concat(getAnonymousId()));
      } else {
        var identityCookie = Cookies.read();
        anonymousId = identityCookie.anonymousId;
        Logger.debug("Loaded anonymous identity record from cookie: ".concat(JSON.stringify(getAnonymousId())));
      }

      return getAnonymousId();
    };
    var identityCookieExists = function identityCookieExists() {
      var identityCookie = Cookies.read();
      return !!(identityCookie && _typeof(identityCookie) === "object" && Object.keys(identityCookie).length > 0);
    };

    var Signal =
    /*#__PURE__*/
    function () {
      function Signal() {
        _classCallCheck(this, Signal);

        this.listeners = [];
      }

      _createClass(Signal, [{
        key: "on",
        value: function on(listener) {
          var _this = this;

          (this.listeners = this.listeners || []).push(listener);
          return function () {
            _this.listeners = _this.listeners.filter(function (i) {
              return i !== listener;
            });
          };
        }
      }, {
        key: "once",
        value: function once(listener) {
          var _this2 = this;

          return this.on(function () {
            _this2.unbindAll();

            try {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              listener.apply(_this2, args);
            } catch (e) {
              Logger.error('Signal listener callback error: ' + e);
            }
          });
        }
      }, {
        key: "emit",
        value: function emit() {
          var _this3 = this;

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          this.listeners.length !== 0 && this.listeners.forEach(function (listener) {
            try {
              listener.apply(_this3, args);
            } catch (e) {
              Logger.error('Signal listener callback error: ' + e);
            }
          });
        }
      }, {
        key: "unbindAll",
        value: function unbindAll() {
          this.listeners = [];
        }
      }]);

      return Signal;
    }();
    var unbindMySignals = function unbindMySignals(typeWithSignals) {
      Logger.debug('Unbinding all signals for type: ', typeWithSignals);
      Object.keys(typeWithSignals).forEach(function (signal) {
        if (typeWithSignals[signal].unbindAll) {
          typeWithSignals[signal].unbindAll();
        }
      });
    };

    var Signals = function Signals() {
      _classCallCheck(this, Signals);
    };
    Signals.onEventSend = new Signal();
    Signals.onFireException = new Signal();
    Signals.onPageMatchStatusUpdated = new Signal();
    Signals.onInitSitemap = new Signal();

    Signals.unbindAll = function () {
      unbindMySignals(Signals);
    };

    var sitemapState = {
      result: {
        currentPage: null,
        matchedConfig: null,
        matchStatus: null
      },
      config: {
        pageTypes: []
      }
    };
    var currentKey = null;
    var getSitemapConfig = function getSitemapConfig() {
      return sitemapState.config;
    };
    var getSitemapResult = function getSitemapResult() {
      return sitemapState.result;
    };
    var getCurrentSitemapKey = function getCurrentSitemapKey() {
      return currentKey;
    };
    var setCurrentSitemapKey = function setCurrentSitemapKey(key) {
      currentKey = key;
    };

    var MatchStatus;

    (function (MatchStatus) {
      MatchStatus["Pending"] = "pending";
      MatchStatus["Running"] = "running";
      MatchStatus["Selected"] = "selected";
      MatchStatus["Matched"] = "matched";
      MatchStatus["Rejected"] = "rejected";
    })(MatchStatus || (MatchStatus = {}));

    var matchPageConfig = function matchPageConfig(pageConfigs) {
      return new Promise(function (resolve, reject) {
        var defaultPageConfig = sitemapState.config.pageTypeDefault;

        if (defaultPageConfig) {
          setDefaultPageConfigToPending(defaultPageConfig);
        }

        if (defaultPageConfig && !pageConfigs.length) {
          selectPageMatchStatus(defaultPageConfig);
          resolve(defaultPageConfig);
          return;
        }

        setPageConfigsToPending(pageConfigs);
        pageConfigs.map(function (pageConfig) {
          isPageMatch(pageConfig).then(function (isMatch) {
            if (isMatch) {
              if (defaultPageConfig) {
                rejectPageMatchStatus(defaultPageConfig);
              }

              selectPageMatchStatus(pageConfig);
              resolve(pageConfig);
            } else {
              rejectPageMatchStatus(pageConfig);

              if (!unresolvedPageMatchExists(pageConfigs)) {
                if (defaultPageConfig) {
                  selectPageMatchStatus(defaultPageConfig);
                  resolve(defaultPageConfig);
                } else {
                  reject("No matching page found");
                }
              }
            }
          }).catch(function (e) {
            Signals.onFireException.emit(new Error("isMatch failed while evaluating the ".concat(pageConfig.name, " page config")), 'Site-wide Javascript');
          });
        });
      });
    };
    var removeOutstandingPageMatchResolvers = function removeOutstandingPageMatchResolvers() {
      var state = sitemapState;

      if (state.result.matchStatus) {
        state.result.matchStatus.forEach(function (s) {
          if (s.status === MatchStatus.Running) {
            s._reject();
          }
        });
        sitemapState.result.matchStatus = [];
      }

      Signals.onPageMatchStatusUpdated.emit(sitemapState.result.matchStatus);
    };

    var setPageConfigsToPending = function setPageConfigsToPending(pageConfigs) {
      pageConfigs.forEach(function (config) {
        handleUpdateResultMatchStatus({
          pageName: config.name,
          status: MatchStatus.Pending
        });
      });
    };

    var setDefaultPageConfigToPending = function setDefaultPageConfigToPending(defaultPageConfig) {
      handleUpdateResultMatchStatus({
        pageName: defaultPageConfig.name,
        status: MatchStatus.Pending
      });
    };

    var selectPageMatchStatus = function selectPageMatchStatus(pageConfig) {
      handleUpdateResultMatchStatus({
        pageName: pageConfig.name,
        endTime: Date.now(),
        status: sitemapState.result.matchStatus.find(function (s) {
          return s.status === MatchStatus.Selected;
        }) ? MatchStatus.Matched : MatchStatus.Selected
      });
    };

    var rejectPageMatchStatus = function rejectPageMatchStatus(pageConfig) {
      handleUpdateResultMatchStatus({
        pageName: pageConfig.name,
        status: MatchStatus.Rejected,
        endTime: Date.now()
      });
    };

    var unresolvedPageMatchExists = function unresolvedPageMatchExists(pageConfigs) {
      var unresolvedMatches = sitemapState.result.matchStatus.filter(function (pageConfig) {
        return pageConfig.status === MatchStatus.Rejected;
      }, 0).length;
      return unresolvedMatches < pageConfigs.length;
    };

    var isPageMatch = function isPageMatch(pageConfig) {
      return new Promise(function (resolve, reject) {
        handleUpdateResultMatchStatus({
          pageName: pageConfig.name,
          status: MatchStatus.Running,
          startTime: Date.now(),
          _reject: reject
        });

        if (typeof pageConfig.isMatch === 'function') {
          var funcValue = pageConfig.isMatch();

          if (_typeof(funcValue) === 'object') {
            funcValue.then(function (isMatch) {
              resolve(isMatch);
            }).catch(function () {// TODO: log this, do anything else?
            });
          } else {
            resolve(funcValue);
          }
        } else {
          Signals.onFireException.emit(new Error("isMatch failed while evaluating the ".concat(pageConfig.name, " page config. isMatch must be a function.")), 'Site-wide Javascript');
        }
      });
    };

    var handleUpdateResultMatchStatus = function handleUpdateResultMatchStatus(matchStatus) {
      sitemapState.result.matchStatus = [].concat(_toConsumableArray(sitemapState.result.matchStatus || []), [matchStatus]);
      Signals.onPageMatchStatusUpdated.emit(sitemapState.result.matchStatus);
    };

    /*
     * Copyright (C) 2010-2019 Evergage, Inc.
     * All rights reserved.
     */
    var CatalogObjectInteractionName;

    (function (CatalogObjectInteractionName) {
      CatalogObjectInteractionName["ViewCatalogObject"] = "View Catalog Object";
      CatalogObjectInteractionName["ViewCatalogObjectDetail"] = "View Catalog Object Detail";
      CatalogObjectInteractionName["QuickViewCatalogObject"] = "Quick View Catalog Object";
      CatalogObjectInteractionName["ShareCatalogObject"] = "Share Catalog Object";
      CatalogObjectInteractionName["ReviewCatalogObject"] = "Review Catalog Object";
      CatalogObjectInteractionName["CommentCatalogObject"] = "Comment Catalog Object";
      CatalogObjectInteractionName["FavoriteCatalogObject"] = "Favorite Catalog Object";
    })(CatalogObjectInteractionName || (CatalogObjectInteractionName = {}));
    /* CART */


    var CartInteractionName;

    (function (CartInteractionName) {
      CartInteractionName["AddToCart"] = "Add To Cart";
      CartInteractionName["RemoveFromCart"] = "Remove From Cart";
      CartInteractionName["ReplaceCart"] = "Replace Cart";
    })(CartInteractionName || (CartInteractionName = {}));

    var OrderInteractionName;

    (function (OrderInteractionName) {
      OrderInteractionName["Purchase"] = "Purchase";
      OrderInteractionName["Preorder"] = "Preorder";
      OrderInteractionName["Cancel"] = "Cancel";
      OrderInteractionName["Ship"] = "Ship";
      OrderInteractionName["Deliver"] = "Deliver";
      OrderInteractionName["Return"] = "Return";
      OrderInteractionName["Exchange"] = "Exchange";
    })(OrderInteractionName || (OrderInteractionName = {}));

    var MetadataUpdateInteractionName;

    (function (MetadataUpdateInteractionName) {
      MetadataUpdateInteractionName["MetadataUpdate"] = "MetadataUpdate";
    })(MetadataUpdateInteractionName || (MetadataUpdateInteractionName = {}));

    var ConsentPurpose;

    (function (ConsentPurpose) {
      ConsentPurpose["Tracking"] = "Tracking";
    })(ConsentPurpose || (ConsentPurpose = {}));

    var ConsentStatus;

    (function (ConsentStatus) {
      ConsentStatus["OptIn"] = "Opt In";
      ConsentStatus["OptOut"] = "Opt Out";
    })(ConsentStatus || (ConsentStatus = {}));

    /**
     *
     * #### Basic usage example:
     * ```javascript
     * try {
     *     // do something
     * } catch(e) {
     *     SalesforceInteractions.sendException(e, "Login");
     * }
     * ```
     *
     *
     * @param exception An Error object for the exception
     * @param errorSection A tag for categorizing the error
     * @param dontLogException Whether to send but silently not log the exception
     *
     */

    var sendException = function sendException(exception, errorSection, dontLogException) {
      Signals.onFireException.emit(exception, errorSection);
      Logger.warn('sendException', {
        event: event,
        errorSection: errorSection
      });
    };

    var currentConsents = [];
    var getConsents = function getConsents() {
      return currentConsents;
    };

    var findCurrentConsent = function findCurrentConsent(consentToFind) {
      return currentConsents.find(function (currentConsent) {
        return consentToFind.purpose == currentConsent.consent.purpose;
      });
    };

    var updateConsents = function updateConsents(consents) {
      handleConsentsUpdate(consents, true);
    };
    var handleConsentsUpdate = function handleConsentsUpdate(consents, sendRevoke) {
      if (Array.isArray(consents)) {
        consents.forEach(function (c) {
          handleSingleConsent(c, sendRevoke);
        });
      } else {
        handleSingleConsent(consents, sendRevoke);
      }

      writeConsentsToCookie(currentConsents);
    };

    var handleSingleConsent = function handleSingleConsent(consent, sendRevoke) {
      if (!validateConsent(consent)) {
        return;
      }

      var foundConsent = findCurrentConsent(consent);

      if (foundConsent) {
        handleExistingConsent(foundConsent, consent, sendRevoke);
      } else {
        handleNewConsent(consent, sendRevoke);
      }
    };

    var handleExistingConsent = function handleExistingConsent(currentConsent, newConsent, sendRevoke) {
      var preUpdateStatus = currentConsent.consent.status;

      if (currentConsent.consent.status != newConsent.status || currentConsent.consent.provider != newConsent.provider) {
        currentConsent.consent = newConsent;
        currentConsent.lastUpdateTime = new Date().toISOString();
      }

      if (sendRevoke && preUpdateStatus == ConsentStatus.OptIn && newConsent.status == ConsentStatus.OptOut) {
        revokeConsent(currentConsent);
      }
    };

    var handleNewConsent = function handleNewConsent(newConsent, sendRevoke) {
      var consentToStore = {
        consent: newConsent,
        lastUpdateTime: new Date().toISOString()
      };
      currentConsents.push(consentToStore);

      if (sendRevoke && consentToStore.consent.status == ConsentStatus.OptOut) {
        revokeConsent(consentToStore);
      }
    };

    var validateConsent = function validateConsent(consent) {
      if (consent && _typeof(consent) == "object" && consent.purpose && consent.provider && consent.status) {
        return true;
      } else {
        sendException(new Error("Invalid consent, check that consent is a valid object and all fields are defined: ".concat(JSON.stringify(consent))), "Salesforce Web SDK");
        return false;
      }
    };

    var revokeConsent = function revokeConsent(revokedConsent) {
      document.dispatchEvent(new CustomEvent(CustomEvents.OnConsentRevoke, {
        detail: {
          revokedConsent: revokedConsent
        }
      }));
    };

    var setConsentLastSentTimes = function setConsentLastSentTimes(consents) {
      var date = new Date().toISOString();
      consents.forEach(function (consent) {
        var foundConsent = findCurrentConsent(consent);
        foundConsent.lastSentTime = date;
      });
      writeConsentsToCookie(currentConsents);
    }; // do not updates consents, and potentially send a consent revoke event, unless
    // an opt-in conset exists in either the consents passed into init or the consents stored in the cookie

    var resolveConsents = function resolveConsents(consents) {
      loadConsentFromCookie();
      Promise.resolve(consents).then(function (resolvedConsents) {
        if (resolvedConsents && resolvedConsents.length > 0) {
          updateConsents(resolvedConsents);
        }
      });
    };

    var loadConsentFromCookie = function loadConsentFromCookie() {
      var identityCookie = Cookies.read();

      if (identityCookie) {
        currentConsents = identityCookie.consents || [];
      }
    };

    var consentOptInExists = function consentOptInExists(consents) {
      return consents.findIndex(function (consent) {
        return consent.status == ConsentStatus.OptIn;
      }) >= 0;
    };

    var currentConsentOptInExists = function currentConsentOptInExists() {
      return consentOptInExists(currentConsents.map(function (currentConsent) {
        return currentConsent.consent;
      }));
    };

    var prepareEvent = function prepareEvent(event) {
      prepareSourcePayload(event);
      prepareUserPayload(event);
      prepareConsentPayload(event);
    };

    var prepareSourcePayload = function prepareSourcePayload(event) {
      event.source = event.source || {};
      event.source = _objectSpread2({}, event.source || {}, {
        pageType: event.source.pageType || getPageTypeFromSitemapState(),
        url: event.source.url || window.location.href,
        urlReferrer: event.source.urlReferrer || document.referrer,
        channel: event.source.channel || DEFAULT_CHANNEL
      });
    };

    var prepareUserPayload = function prepareUserPayload(event) {
      event.user = _objectSpread2({}, event.user || {}, {
        anonymousId: getAnonymousId()
      });
    };

    var prepareConsentPayload = function prepareConsentPayload(event) {
      if (event.consents) {
        handleConsentsUpdate(event.consents, false);
      }

      event.consents = getConsents().filter(function (consent) {
        return !consent.lastSentTime || new Date(consent.lastUpdateTime) >= new Date(consent.lastSentTime);
      }).map(function (consentWithMetadata) {
        return consentWithMetadata.consent;
      });
      setConsentLastSentTimes(event.consents);
    };

    var getPageTypeFromSitemapState = function getPageTypeFromSitemapState() {
      if (sitemapState.result.currentPage && sitemapState.result.currentPage.source) {
        return sitemapState.result.currentPage.source.pageType;
      }
    };

    document.addEventListener(CustomEvents.OnConsentRevoke, function (event) {
      if (event.detail && event.detail.revokedConsent) {
        var consentRevokeEvent = {
          interaction: {
            name: MetadataUpdateInteractionName.MetadataUpdate
          },
          consents: [event.detail.revokedConsent.consent]
        };
        sendConsentRevokeEvent(consentRevokeEvent);
      }
    });
    var sendEvent = function sendEvent(event) {
      return sendEventWithConsentCheck(event, currentConsentOptInExists).catch(function (error) {
        Logger.error(error.message);
        Signals.onFireException.emit(error, 'Site-wide JavaScript');
        return event;
      });
    };

    var sendConsentRevokeEvent = function sendConsentRevokeEvent(event) {
      sendEventWithConsentCheck(event, function () {
        return true;
      }).then(function () {
        return Logger.debug('Consent revoked');
      }, function (error) {
        return Signals.onFireException.emit(error, 'Site-wide JavaScript');
      });
    };

    var sendEventWithConsentCheck = function sendEventWithConsentCheck(event, consentChecker) {
      event = handleOnActionEvent(event);
      prepareEvent(event);

      if (consentChecker && !consentChecker()) {
        return Promise.reject(new Error('Event will not send. No opt-in consents provided.'));
      }

      Logger.debug('Sent event: ', event);
      Signals.onEventSend.emit(event);
      return Promise.resolve(event);
    };

    var handleOnActionEvent = function handleOnActionEvent(event) {
      event = matchedConfigOnActionEvent(event);
      event = globalOnActionEvent(event);
      return event;
    };

    var matchedConfigOnActionEvent = function matchedConfigOnActionEvent(event) {
      var matchedConfig = sitemapState.result.matchedConfig;

      try {
        event = matchedConfig && matchedConfig.onActionEvent ? matchedConfig.onActionEvent(event) : event;

        if (_typeof(event) === 'object') {
          return event;
        } else {
          Signals.onFireException.emit(new Error("onActionEvent failed for the ".concat(sitemapState.result.matchedConfig.name, " page config. Must return an object or null.")), 'Site-wide Javascript');
        }
      } catch (e) {
        Signals.onFireException.emit(new Error("onActionEvent failed for the ".concat(sitemapState.result.matchedConfig.name, " page config. ").concat(e.message, ".")), 'Site-wide Javascript');
      }
    };

    var globalOnActionEvent = function globalOnActionEvent(event) {
      var siteMapConfig = sitemapState.config;

      try {
        event = siteMapConfig.global && siteMapConfig.global.onActionEvent ? siteMapConfig.global.onActionEvent(event) : event;

        if (_typeof(event) === 'object') {
          return event;
        } else {
          Signals.onFireException.emit(new Error("onActionEvent failed for the global page config. Must return an object or null."), 'Site-wide Javascript');
        }
      } catch (e) {
        Signals.onFireException.emit(new Error("onActionEvent failed for the global page config. ".concat(e.message, ".")), 'Site-wide Javascript');
      }
    };

    var processInteraction = function processInteraction(pageConfig) {
      return new Promise(function (resolve, reject) {
        Signals.onInitSitemap.once(function () {
          return reject(SITEMAP_REINIT);
        });
        var interaction = {
          name: null
        };
        var interactionConfigPromises = [];
        Object.keys(pageConfig.interaction).forEach(function (key) {
          var valueFromConfig = pageConfig.interaction[key];
          var interactionConfigPromise = resolveAndCleanValue(valueFromConfig, key).then(function (resolvedValue) {
            interaction[key] = resolvedValue;
          });
          interactionConfigPromises.push(interactionConfigPromise);
        });
        Promise.all(interactionConfigPromises).then(function () {
          resolve(interaction);
        }).catch(function (e) {
          Signals.onFireException.emit(new Error("Catalog object interaction config was rejected"), 'Site-wide Javascript');
        });
      });
    };

    var resolveAndCleanValue = function resolveAndCleanValue(value, key) {
      try {
        setCurrentSitemapKey(key);

        if (_typeof(value) === "object" && !Array.isArray(value) && Object.keys(value).length > 0) {
          return buildNestedAttributes(value);
        } else {
          return Promise.resolve(value).then(function (resolvedNotNestedValue) {
            return typeof resolvedNotNestedValue === "function" ? resolvedNotNestedValue() : resolvedNotNestedValue;
          });
        }
      } catch (e) {
        Signals.onFireException.emit(new Error("getValue for ".concat(key, " failed on ").concat(sitemapState.result.matchedConfig.name, " while evaluating custom function. ").concat(e.message, ".")), 'Site-wide Javascript');
      }
    };

    var buildNestedAttributes = function buildNestedAttributes(nestedAttributeConfig) {
      var nestedAttributes = {};
      var nestedAttributeKeys = Object.keys(nestedAttributeConfig);
      var resolvedNestedAttributes = {};
      nestedAttributeKeys.forEach(function (nestedKey) {
        var nestedAttributeValue = nestedAttributeConfig[nestedKey];
        var resolvedNestedAttributeValue = resolveAndCleanValue(nestedAttributeValue, nestedKey);
        nestedAttributes[nestedKey] = resolvedNestedAttributeValue;
      });
      return Promise.all(Object.values(nestedAttributes)).then(function (values) {
        values.forEach(function (value, index) {
          var key = nestedAttributeKeys[index];
          resolvedNestedAttributes[key] = value;
        });
        return resolvedNestedAttributes;
      });
    };

    var listenerSearchInterval;
    var startListenerSearch = function startListenerSearch() {
      cancelListenerSearch();

      if (pageHasMissingListeners()) {
        listenerSearchInterval = setInterval(function () {
          var updated = false;
          var intervalTimerStart = new Date().getTime();
          var listenerState = sitemapState.result.matchedConfig.listeners.map(function (d) {
            if (d.selectorFound) {
              return d;
            } else {
              var listener = attemptToBindListener(d);
              updated = listener.selectorFound || updated;
              return listener;
            }
          });

          if (updated) {
            Object.assign(sitemapState.result.matchedConfig, _objectSpread2({}, sitemapState.result.matchedConfig, {
              listeners: listenerState
            }));
          }

          var intervalTimerEnd = new Date().getTime();
          var intervalRunningTime = intervalTimerEnd - intervalTimerStart;

          if (intervalRunningTime > 50 || !pageHasMissingListeners()) {
            cancelListenerSearch();
          }
        }, 1000);
      }
    };

    var pageHasMissingListeners = function pageHasMissingListeners() {
      if (sitemapState.result.matchedConfig) {
        var listeners = sitemapState.result.matchedConfig.listeners;

        if (listeners) {
          return listeners.filter(function (d) {
            return !d.selectorFound;
          }).length;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    var cancelListenerSearch = function cancelListenerSearch() {
      if (typeof listenerSearchInterval === 'number') {
        clearInterval(listenerSearchInterval);
      }

      listenerSearchInterval = null;
    };

    var sendEventWithCallback = function sendEventWithCallback(event, listener) {
      try {
        listener.callback(event);
      } catch (e) {
        Signals.onFireException.emit(new Error("Listener callback on ".concat(listener.bind, " bound to ").concat(listener.selector, " failed for the ").concat(sitemapState.result.matchedConfig.name, " page config. ").concat(e.message, ".")), 'Site-wide Javascript');
      }
    };

    var attemptToBindListener = function attemptToBindListener(listenerConfig) {
      var elements = cash(listenerConfig.selector);

      var listener = _objectSpread2({}, listenerConfig, {
        selectorFound: elements.length > 0
      });

      elements.on(listener.bind, function (event) {
        sendEventWithCallback(event, listener);
      });
      return listener;
    };
    var removeCurrentListeners = function removeCurrentListeners() {
      if (sitemapState.result && sitemapState.result.matchedConfig && sitemapState.result.matchedConfig.listeners) {
        sitemapState.result.matchedConfig.listeners.forEach(function (listener) {
          cash(listener.selector).off(listener.bind);
        });
      }
    };

    var setConfig = function setConfig(config) {
      config.global = config.global || {};

      if (_typeof(config.global) != "object") {
        Signals.onFireException.emit(new Error("The global config has a type of ".concat(_typeof(config.global), ", but it must be an object")), 'Sitewide Javascript');
      }

      Object.assign(sitemapState.config, _objectSpread2({}, config));
      Signals.onInitSitemap.emit(sitemapState.config);
    };
    var initSitemap = function initSitemap(siteMapConfig) {
      run(siteMapConfig);
      return true;
    };
    var getState = function getState() {
      return sitemapState;
    };
    var build = function build(config) {
      matchPageConfig(config.pageTypes).then(mergeConfigWithGlobal).then(handleConfig).catch(function (e) {
        if (e !== SITEMAP_REINIT) Signals.onFireException.emit(new Error("Unhandled exception: ".concat(e)), 'Site-wide Javascript');
      });
    };

    var handleConfig = function handleConfig(pageConfig) {
      sitemapState.result.matchedConfig = _objectSpread2({}, pageConfig, {
        listeners: processListeners(pageConfig)
      });
      sitemapState.result.currentPage = _objectSpread2({}, sitemapState.result.currentPage || {}, {
        source: {
          pageType: pageConfig.name,
          locale: processLocale(pageConfig)
        },
        user: {
          anonymousId: null // TODO: this gets filled in during sendEvent, a little strange

        },
        interaction: null,
        pageView: true
      });
      return pageConfig.interaction ? processInteraction(pageConfig).then(function (interaction) {
        sitemapState.result.currentPage.interaction = interaction;
      }) : Promise.resolve();
    };

    var processListeners = function processListeners(pageConfig) {
      return (pageConfig.listeners || []).map(function (listenerConfig) {
        return attemptToBindListener(listenerConfig);
      });
    };

    var processLocale = function processLocale(pageConfig) {
      return typeof pageConfig.locale === "function" ? pageConfig.locale() : pageConfig.locale;
    };

    var mergeDeep = function mergeDeep() {
      var isObject = function isObject(obj) {
        return obj && _typeof(obj) === 'object';
      };

      for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
        objects[_key] = arguments[_key];
      }

      return objects.reduce(function (prev, obj) {
        Object.keys(obj).forEach(function (key) {
          var pVal = prev[key];
          var oVal = obj[key];

          if (Array.isArray(pVal) && Array.isArray(oVal)) {
            Object.assign(prev, _defineProperty({}, key, pVal.concat.apply(pVal, _toConsumableArray(oVal))));
          } else if (isObject(pVal) && isObject(oVal)) {
            Object.assign(prev, _defineProperty({}, key, mergeDeep(pVal, oVal)));
          } else {
            Object.assign(prev, _defineProperty({}, key, oVal));
          }
        });
        return prev;
      }, {});
    };

    var mergeConfigWithGlobal = function mergeConfigWithGlobal(pageConfig) {
      var global = sitemapState.config.global || {};
      var globalOnActionEvent = global.onActionEvent;
      delete global.onActionEvent;
      var mergedConfig = mergeDeep(global, pageConfig);
      global.onActionEvent = globalOnActionEvent;
      return mergedConfig;
    };

    var validatePageConfigs = function validatePageConfigs(siteMapConfig) {
      try {
        validateGlobalConfig(siteMapConfig.global);
        validateDefaultConfig(siteMapConfig.pageTypeDefault);
        validatePageTypeConfigs(siteMapConfig.pageTypes);
        return true;
      } catch (e) {
        Signals.onFireException.emit(new Error(e), 'Sitemap');
        return false;
      }
    };

    var validateDefaultConfig = function validateDefaultConfig(defaultConfig) {
      if (defaultConfig) {
        Object.keys(defaultConfig).forEach(function (key) {
          if (key !== "contentZones" && key !== "listeners" && key !== "locale" && key !== "name" && key != "onActionEvent") {
            throw new Error("".concat(key, " is not a valid default config attribute."));
          }
        });
      }
    };

    var validateGlobalConfig = function validateGlobalConfig(globalConfig) {
      if (globalConfig) {
        Object.keys(globalConfig).forEach(function (key) {
          if (key !== "contentZones" && key !== "listeners" && key !== "locale" && key != "onActionEvent") {
            throw new Error("".concat(key, " is not a valid global config attribute."));
          }
        });
      }
    };

    var validatePageTypeConfigs = function validatePageTypeConfigs(pageConfigs) {
      pageConfigs.forEach(function (pageConfig) {
        if (!pageConfig.name || !pageConfig.isMatch) {
          throw new Error("All page configs must have a name and isMatch attribute defined");
        }
      });
    };

    var processResult = function processResult() {
      var result = sitemapState.result;
      sendEvent(sitemapState.result.currentPage);
      sitemapState.result = result;
    };

    var run = function run(siteMapConfig) {
      setConfig(siteMapConfig);
      removeCurrentListeners();
      removeOutstandingPageMatchResolvers();
      cancelListenerSearch();
      sitemapState.result.currentPage = null;

      if (!validatePageConfigs(siteMapConfig)) {
        return;
      }

      matchPageConfig(siteMapConfig.pageTypes).then(mergeConfigWithGlobal).then(handleConfig).then(processResult).then(startListenerSearch).catch(function (e) {
        if (e !== SITEMAP_REINIT) Signals.onFireException.emit(new Error("Unhandled exception: ".concat(e)), 'Site-wide Javascript');
      });
    };

    function listener(bind, selector, callback) {
      if (typeof callback === "function") {
        return {
          bind: bind,
          selector: selector,
          callback: callback
        };
      } else {
        return null;
      }
    }

    var fromSelector = function fromSelector(selector, transform) {
      return function () {
        if (typeof selector != 'string') {
          Signals.onFireException.emit(new Error("getValue for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, ". Selector must be a string.")), 'Site-wide Javascript');
          return null;
        }

        var resolvedValue = cash(selector).first().text();
        resolvedValue = internalTransform(transform, resolvedValue);
        return resolvedValue;
      };
    };

    var fromSelectorAttribute = function fromSelectorAttribute(selector, attribute, transform) {
      return function () {
        if (typeof selector != 'string') {
          Signals.onFireException.emit(new Error("getValue for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, ". Selector must be a string.")), 'Site-wide Javascript');
          return null;
        }

        if (typeof attribute != 'string') {
          Signals.onFireException.emit(new Error("getValue for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, ". Attribute must be a string.")), 'Site-wide Javascript');
          return null;
        }

        var resolvedValue = cash(selector).first().attr(attribute);
        resolvedValue = internalTransform(transform, resolvedValue);
        return resolvedValue;
      };
    };

    var fromSelectorMultiple = function fromSelectorMultiple(selector, transform) {
      return function () {
        if (typeof selector != 'string') {
          Signals.onFireException.emit(new Error("getValue for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, ". Selector must be a string.")), 'Site-wide Javascript');
          return null;
        }

        var selectedElements = cash(selector);
        var resolvedValue = selectedElements.get().map(function (elem) {
          return cash(elem).text();
        });
        resolvedValue = internalTransform(transform, resolvedValue);
        return resolvedValue;
      };
    };

    var fromSelectorAttributeMultiple = function fromSelectorAttributeMultiple(selector, attribute, transform) {
      return function () {
        if (typeof selector != 'string') {
          Signals.onFireException.emit(new Error("getValue for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, ". Selector must be a string.")), 'Site-wide Javascript');
          return null;
        }

        if (typeof attribute != 'string') {
          Signals.onFireException.emit(new Error("getValue for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, ". Attribute must be a string.")), 'Site-wide Javascript');
          return null;
        }

        var selectedElements = cash(selector);
        var resolvedValue = selectedElements.get().map(function (elem) {
          return cash(elem).attr(attribute);
        });
        resolvedValue = internalTransform(transform, resolvedValue);
        return resolvedValue;
      };
    };

    var fromItemProp = function fromItemProp(itemProp, transform) {
      return function () {
        var resolvedValue = cash("[itemprop='" + itemProp + "']").first().attr("content");
        resolvedValue = internalTransform(transform, resolvedValue);
        return resolvedValue;
      };
    };

    var fromMeta = function fromMeta(metaTag, transform) {
      return function () {
        var resolvedValue = cash("meta[name='" + metaTag + "']").first().attr("content") || cash("meta[property='" + metaTag + "']").first().attr("content");
        resolvedValue = internalTransform(transform, resolvedValue);
        return resolvedValue;
      };
    };

    var fromWindow = function fromWindow(path, transform) {
      return function () {
        var resolvedValue = getValueFromNestedObject(path);
        resolvedValue = internalTransform(transform, resolvedValue);
        return resolvedValue;
      };
    };

    var fromJsonLd = function fromJsonLd(path, transform) {
      return function () {
        var json = cash("script[type='application/ld+json']").first().text();

        try {
          var parsedJson = JSON.parse(json);

          if (!path) {
            return internalTransform(transform, parsedJson);
          } else {
            var resolvedValue = getValueFromNestedObject(path, parsedJson);
            return internalTransform(transform, resolvedValue);
          }
        } catch (e) {
          Signals.onFireException.emit(new Error("Parsing JSON-LD for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, ". ").concat(e)), 'Site-wide Javascript');
        }
      };
    };

    var fromCanonical = function fromCanonical(transform) {
      return function () {
        var resolvedValue = cash('link[rel=canonical]').attr("href");
        resolvedValue = internalTransform(transform, resolvedValue);
        return resolvedValue;
      };
    };

    var fromHref = function fromHref(transform) {
      return function () {
        var resolvedValue = window.location.href;
        resolvedValue = internalTransform(transform, resolvedValue);
        return resolvedValue;
      };
    };

    var buildCategoryId = function buildCategoryId(selector, startFrom, ignoreLast, transform) {
      return function () {
        var elements = Array.from(cash(selector));

        if (startFrom) {
          elements = elements.slice(startFrom);
        }

        if (ignoreLast) {
          elements = elements.slice(0, -1);
        }

        var idParts = [];
        elements.forEach(function (elem) {
          var idPart = cash(elem).text().trim();

          if (idPart) {
            idParts.push(idPart);
          } else {
            Signals.onFireException.emit(new Error("buildCategoryId for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, ". A category part is null.")), 'Site-wide Javascript');
          }
        });
        var categoryId = idParts.join('|');
        categoryId = internalTransform(transform, categoryId);
        return categoryId;
      };
    };

    var buildCategoryIdAttribute = function buildCategoryIdAttribute(selector, attribute, startFrom, ignoreLast, transform) {
      return function () {
        var elements = Array.from(cash(selector));

        if (startFrom) {
          elements = elements.slice(startFrom);
        }

        if (ignoreLast) {
          elements = elements.slice(0, -1);
        }

        var idParts = [];
        elements.forEach(function (elem) {
          var idPart = cash(elem).attr(attribute).trim();

          if (idPart) {
            idParts.push(idPart);
          } else {
            Signals.onFireException.emit(new Error("buildCategoryId for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, ". A category part is null.")), 'Site-wide Javascript');
          }
        });
        var categoryId = idParts.join('|');
        categoryId = internalTransform(transform, categoryId);
        return categoryId;
      };
    };

    var internalTransform = function internalTransform(transformFunc, resolvedValue) {
      if (transformFunc) {
        try {
          return transformFunc(resolvedValue);
        } catch (e) {
          Signals.onFireException.emit(new Error("getValue for ".concat(getCurrentSitemapKey(), " failed on ").concat(sitemapState.result.matchedConfig.name, " inside of the custom transform function. ").concat(e)), 'Site-wide Javascript');
          return null;
        }
      }

      return resolvedValue;
    };

    var getValueFromNestedObject = function getValueFromNestedObject(path, obj) {
      var cur = obj || window;
      var elems = path.split('.');
      var match;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = elems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var elem = _step.value;
          match = /(\w+)\[([0-9]+)\]/.exec(elem);

          if (cur[elem]) {
            cur = cur[elem];
          } else if (match) {
            if (cur[match[1]]) {
              cur = cur[match[1]][parseInt(match[2], 10)];

              if (!cur) {
                return null;
              }
            }
          } else {
            return null;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return cur;
    };
    var resolvers = {
      fromSelector: fromSelector,
      fromSelectorAttribute: fromSelectorAttribute,
      fromSelectorMultiple: fromSelectorMultiple,
      fromSelectorAttributeMultiple: fromSelectorAttributeMultiple,
      fromItemProp: fromItemProp,
      fromMeta: fromMeta,
      fromWindow: fromWindow,
      fromJsonLd: fromJsonLd,
      fromCanonical: fromCanonical,
      fromHref: fromHref,
      buildCategoryId: buildCategoryId,
      buildCategoryIdAttribute: buildCategoryIdAttribute
    };

    // tslint:disable variable-name
    var cashDom = cash;

    var unbindByIds = {};

    var bind = function bind(trueFunc) {
      var bindId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.random().toString(36).slice(2);
      var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;
      var checkInterval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;
      if (typeof trueFunc !== "function") return;
      return new Promise(function (resolve, reject) {
        var currentRunTime = 0;
        var interval = setInterval(function () {
          try {
            currentRunTime += checkInterval;
            var resolvedValue = trueFunc();

            if (resolvedValue) {
              delete unbindByIds[bindId];
              clearInterval(interval);
              resolve(resolvedValue);
            }

            if (currentRunTime >= timeout) {
              unbindByIds[bindId]();
              delete unbindByIds[bindId];
            }
          } catch (e) {
            delete unbindByIds[bindId];
            clearInterval(interval);
            reject(e);
          }
        }, checkInterval);

        unbindByIds[bindId] = function () {
          clearInterval(interval);
        };
      });
    };

    var unbind = function unbind(bindId) {
      if (!bindId || typeof bindId !== "string" || typeof unbindByIds[bindId] !== "function") return null;
      unbindByIds[bindId]();
      delete unbindByIds[bindId];
    };

    var getBindings = function getBindings() {
      return unbindByIds;
    };

    var clearBindings = function clearBindings() {
      for (var id in unbindByIds) {
        if (unbindByIds.hasOwnProperty(id)) {
          if (typeof unbindByIds[id] === "function") {
            unbindByIds[id]();
            delete unbindByIds[id];
          }
        }
      }
    };

    var resolveWhenTrue = {
      bind: bind,
      unbind: unbind,
      getBindings: getBindings,
      clearBindings: clearBindings
    };

    var util = {
      resolveWhenTrue: resolveWhenTrue
    };

    var lifecycle = {
      state: "shutDown"
      /* SHUT_DOWN */

    };
    var getLifecycleState = function getLifecycleState() {
      return lifecycle.state;
    };
    var setLifecycleState = function setLifecycleState(state) {
      return lifecycle.state = state;
    };

    var sdkConfig = {
      cookieDomain: null,
      consents: null
    };
    var getSdkConfig = function getSdkConfig() {
      return sdkConfig;
    };
    var setSdkConfig = function setSdkConfig(newSdkConfig) {
      if (newSdkConfig.cookieDomain) {
        // TODO: change this maybe to event dispatch/listener
        setCookieDomain(newSdkConfig.cookieDomain);
      }

      setCookieHash();
      sdkConfig = _objectSpread2({}, sdkConfig, {}, newSdkConfig);
    };

    var DisplayUtils = function () {
      var unbindByIds = {};

      function generateId() {
        var id = Math.random().toString(36).slice(2);

        while (unbindByIds[id]) {
          id = Math.random().toString(36).slice(2);
        }

        return id;
      }

      function getBindId(providedId, defaultId, useRandomId) {
        return useRandomId ? generateId() : providedId || defaultId;
      }

      function buildBaseMethods(bindId, useRandomId) {
        return {
          pageElementLoaded: function pageElementLoaded(targetSelector, observerSelector) {
            observerSelector = typeof observerSelector === "string" ? observerSelector : "body";

            if (typeof targetSelector !== "string" || targetSelector === "" || typeof observerSelector !== "string" || observerSelector === "") {
              throw new Error("[pageElementLoaded] Invalid arguments");
            }

            return new Promise(function (resolve) {
              var targetElements = cashDom(targetSelector);

              if (targetElements.length > 0) {
                resolve(targetElements[0]);
              } else {
                var observerNode = cashDom(observerSelector)[0];

                if (!observerNode) {
                  throw new Error("pageElementLoaded cannot be bound. observerSelector ".concat(observerSelector, " is not on the page"));
                }

                var observer = new MutationObserver(function (mutationList, observer) {
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = mutationList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var mutationRecord = _step.value;

                      if (mutationRecord.addedNodes && mutationRecord.addedNodes.length > 0) {
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                          for (var _iterator2 = mutationRecord.addedNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var addedNode = _step2.value;
                            var targetElement = cashDom(addedNode).is(targetSelector) ? addedNode : cashDom(addedNode).find(targetSelector).get(0);

                            if (targetElement) {
                              if (bindId) {
                                bindingMethods.unbind(bindId);
                              } else {
                                observer.disconnect();
                              }

                              resolve(targetElement);
                              return;
                            }
                          }
                        } catch (err) {
                          _didIteratorError2 = true;
                          _iteratorError2 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                              _iterator2.return();
                            }
                          } finally {
                            if (_didIteratorError2) {
                              throw _iteratorError2;
                            }
                          }
                        }
                      }
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                });
                observer.observe(observerNode, {
                  childList: true,
                  subtree: true
                });
              }

              bindId = getBindId(bindId, "<pageElementLoaded>" + targetSelector, useRandomId);

              unbindByIds[bindId] = function () {
                observer && observer.disconnect();
              };
            });
          },
          pageElementVisible: function pageElementVisible(selector, percentage) {
            var threshold = percentage || 0;

            if (typeof selector !== "string" || selector === "" || typeof threshold !== "number" || threshold < 0 || threshold > 1) {
              throw new Error("[pageElementVisible] Invalid arguments");
            }

            return new Promise(function (resolve) {
              var target = cashDom(selector);
              var options = {
                threshold: threshold
              };
              var observer = new IntersectionObserver(callbackFn, options);

              function callbackFn(entries, observer) {
                for (var i = 0; i < entries.length; i++) {
                  if (entries[i].isIntersecting) {
                    if (bindId) {
                      bindingMethods.unbind(bindId);
                    } else {
                      observer.disconnect();
                    }

                    resolve(entries[i]);
                    break;
                  }
                }
              }

              observer.observe(target[0]);
              bindId = getBindId(bindId, "<pageElementVisible>" + selector, useRandomId);

              unbindByIds[bindId] = function () {
                observer.disconnect();
              };
            });
          },
          pageExit: function pageExit(delay) {
            delay = delay || 0;

            if (typeof delay !== "number" || delay < 0) {
              throw new Error("[pageExit] Invalid arguments");
            }

            return new Promise(function (resolve) {
              var $target = cashDom(document);
              var events = "mousemove";
              var timer;

              function onmousemove(e) {
                clearTimeout(timer);

                if (e.pageY - window.pageYOffset <= 10) {
                  timer = delay > 0 ? setTimeout(callbackFn.bind(this, e), delay) : callbackFn.call(this, e);
                }
              }

              function callbackFn(e) {
                if (bindId) {
                  bindingMethods.unbind(bindId);
                } else {
                  $target.off(events, onmousemove);
                }

                clearTimeout(timer);
                resolve(e);
              }

              $target.on(events, onmousemove);
              bindId = getBindId(bindId, "<pageExit>", useRandomId);

              unbindByIds[bindId] = function () {
                $target.off(events, onmousemove);
              };
            });
          },
          pageInactive: function pageInactive(ms) {
            if (typeof ms !== "number" || ms <= 0) {
              throw new Error("[pageInactive] Invalid arguments");
            }

            function _pageInactive(ms, state) {
              var promise = new Promise(function (resolve) {
                var $target = cashDom(document);
                var resetEvents = "mousemove click scroll keyup keydown";
                var idleTimer;

                function callbackFn(e) {
                  e = e || new Event("pageInactive");

                  if (bindId && !state.isSubscribe) {
                    bindingMethods.unbind(bindId);
                  } else {
                    $target.off(resetEvents, resetTimer);
                  }

                  resolve(e);
                }

                function resetTimer(e) {
                  clearTimeout(idleTimer);
                  idleTimer = setTimeout(callbackFn.bind(this, e), ms);
                }

                resetTimer();
                $target.on(resetEvents, resetTimer);
              });

              promise.subscribe = function subscribe(callback) {
                delete promise.subscribe;
                state.isSubscribe = true;
                promise.then(function (event) {
                  event.disconnect = function () {
                    if (bindId) {
                      bindingMethods.unbind(bindId);
                    } else {
                      state.isDisconnected = true;
                    }
                  };

                  callback(event);
                  !state.isDisconnected && _pageInactive(ms, state).subscribe(callback);
                });
                return promise;
              };

              return promise;
            }

            var state = {
              isDisconnected: false,
              isSubscribe: false
            };
            bindId = getBindId(bindId, "<pageInactive>", useRandomId);

            unbindByIds[bindId] = function () {
              state.isDisconnected = true;
            };

            return _pageInactive(ms, state);
          },
          pageScroll: function pageScroll(percentage) {
            if (typeof percentage !== "number" || percentage < 0 || percentage > 1) {
              throw new Error("[pageScroll] Invalid arguments");
            }

            return new Promise(function (resolve) {
              var $target = cashDom(document);
              var events = "scroll";

              function callbackFn(e) {
                resolve(e);

                if (bindId) {
                  bindingMethods.unbind(bindId);
                } else {
                  $target.off(events, onScroll);
                }
              }

              function onScroll(e) {
                var scrollPercentage = window.scrollY / (document.documentElement.scrollHeight - window.innerHeight);

                if (scrollPercentage >= percentage) {
                  callbackFn.call(this, e);
                }
              }

              $target.on(events, onScroll);
              bindId = getBindId(bindId, "<pageScroll>", useRandomId);

              unbindByIds[bindId] = function () {
                $target.off(events, onScroll);
              };
            });
          }
        };
      }

      function buildBindingMethods() {
        return {
          bind: function bind(id) {
            if (id && unbindByIds[id]) {
              unbindByIds[id]();
              delete unbindByIds[id];
            }

            return buildBaseMethods(id);
          },
          unbind: function unbind(id) {
            if (!id || typeof id !== "string" || typeof unbindByIds[id] !== "function") return null;
            unbindByIds[id]();
            delete unbindByIds[id];
          },
          getBindings: function getBindings() {
            return unbindByIds;
          },
          clearBindings: function clearBindings() {
            for (var id in unbindByIds) {
              if (unbindByIds.hasOwnProperty(id)) {
                unbindByIds[id]();
                delete unbindByIds[id];
              }
            }
          }
        };
      }

      var baseMethods = buildBaseMethods(null, true);
      var bindingMethods = buildBindingMethods();
      return Object.assign(baseMethods, bindingMethods);
    }();

    var unbindOnFireException;
    var unbindOnSendEvent;
    var unbindOnPageMatchStatusUpdated;
    var unbindOnInitSitemap;

    function unbindPublicSignalsToDocument() {
      if (unbindOnFireException) {
        unbindOnFireException();
      }

      if (unbindOnSendEvent) {
        unbindOnSendEvent();
      }

      if (unbindOnPageMatchStatusUpdated) {
        unbindOnPageMatchStatusUpdated();
      }

      if (unbindOnInitSitemap) {
        unbindOnInitSitemap();
      }
    }

    function bindPublicSignalsToDocument() {
      unbindOnFireException = Signals.onFireException.on(function (error, context) {
        document.dispatchEvent(new CustomEvent(CustomEvents.OnException, {
          detail: {
            error: error,
            context: context
          }
        }));
      });
      unbindOnSendEvent = Signals.onEventSend.on(function (actionEvent) {
        var canceled = !document.dispatchEvent(new CustomEvent(CustomEvents.OnBeforeEventSend, {
          detail: {
            actionEvent: actionEvent
          },
          cancelable: true
        }));

        if (!canceled) {
          document.dispatchEvent(new CustomEvent(CustomEvents.OnEventSend, {
            detail: {
              actionEvent: actionEvent
            }
          }));
        }
      });
      unbindOnPageMatchStatusUpdated = Signals.onPageMatchStatusUpdated.on(function (matchStatus) {
        document.dispatchEvent(new CustomEvent(CustomEvents.OnPageMatchStatusUpdated, {
          detail: {
            matchStatus: matchStatus
          }
        }));
      });
      unbindOnInitSitemap = Signals.onInitSitemap.on(function (sitemapConfig) {
        document.dispatchEvent(new CustomEvent(CustomEvents.OnInitSitemap, {
          detail: {
            sitemapConfig: sitemapConfig
          }
        }));
      });
    }

    function checkEnv() {
      if (userAgentIsRobot()) {
        return shutDown('You are a robot.');
      } // Casting visibilityState to avoid complaints about 'prerender' no longer being a valid VisibilityState value
      // in TypeScript 3.7.  Some browsers might still return this, even though it's deprecated.


      var preRendered = document.visibilityState === 'prerender';

      if (preRendered && isSafari) {
        return shutDown('Page is pre-rendered and loaded in Safari.');
      }

      return true;
    }

    function checkSdkConfig(sdkConfig) {
      if (!sdkConfig) {
        return shutDown("No SDK Config provided in init");
      } else if (!sdkConfig.consents) {
        return shutDown("No consents provided in SDK Config");
      }

      return true;
    }

    function shutDown(message) {
      unbindPublicSignalsToDocument();
      document.dispatchEvent(new CustomEvent(CustomEvents.OnShutDown, {
        detail: {
          message: message
        }
      }));
      setLifecycleState("shutDown"
      /* SHUT_DOWN */
      );
      return false;
    } // returns a Promise that is resolved or rejected based on initialization of the Web SDK itself
    // and not around validating anything around consent, other than checking that it is being handled via sdkConfig

    var init = function init(sdkConfig) {
      if (!checkEnv() || !checkSdkConfig(sdkConfig)) {
        return Promise.reject();
      }

      if (getLifecycleState() == "initialized"
      /* INITIALIZED */
      ) {
          shutDown("reinitializing Web SDK");
        }

      setSdkConfig(sdkConfig);
      bindPublicSignalsToDocument();
      loadAnonymousIdentity();
      setLifecycleState("initialized"
      /* INITIALIZED */
      );
      document.dispatchEvent(new CustomEvent(CustomEvents.OnInit));
      resolveConsents(sdkConfig.consents);
      return Promise.resolve();
    };
    var reinit = function reinit() {
      // W-9974392: don't restore the initial configured consent because it may have changed, use the actual values instead
      var consents = getConsents().map(function (consentWithMetadata) {
        return consentWithMetadata.consent;
      });
      init(_objectSpread2({}, getSdkConfig(), {
        consents: consents
      })).then(function () {
        initSitemap(sitemapState.config);
      });
    }; // TODO: is there a better way to do this? We need to export as an ES module but also expose
    // something on the global namespace.

    window.SalesforceInteractions = {
      init: init,
      reinit: reinit,
      sendEvent: sendEvent,
      sendException: sendException,
      getAnonymousId: getAnonymousId,
      setAnonymousId: setAnonymousId,
      getCookieDomain: getCookieDomain,
      setCookieDomain: setCookieDomain,
      updateConsents: updateConsents,
      getConsents: getConsents,
      ConsentStatus: ConsentStatus,
      log: Logger,
      getLoggingLevel: getLoggingLevel,
      setLoggingLevel: setLoggingLevel,
      initSitemap: initSitemap,
      getSitemapConfig: getSitemapConfig,
      getSitemapResult: getSitemapResult,
      CatalogObjectInteractionName: CatalogObjectInteractionName,
      CartInteractionName: CartInteractionName,
      OrderInteractionName: OrderInteractionName,
      listener: listener,
      build: build,
      cashDom: cashDom,
      resolvers: resolvers,
      util: util,
      DisplayUtils: DisplayUtils,
      CustomEvents: CustomEvents
    };

    // Returns the page type.
    function getPageType$1() {
        if (isSearchPage()) {
            return "Search" /* SEARCH */;
        }
        else if (isHomePage()) {
            return "Home" /* HOME */;
        }
        else if (isErrorPage()) {
            return "Error" /* ERROR */;
        }
        else if (isRegisterPage()) {
            return "Register" /* REGISTER */;
        }
        else if (isLoginPage()) {
            return "Login" /* LOGIN */;
        }
        else {
            return "Other" /* OTHER */;
        }
    }
    // Is error page.
    function isErrorPage() {
        if (globalThis.siteLocation.route.attributes.name === 'Error') {
            return true;
        }
        return false;
    }
    // Is home page.
    function isHomePage() {
        if (globalThis.siteLocation.route.attributes.name === 'Home') {
            return true;
        }
        return false;
    }
    // Is login page.
    function isLoginPage() {
        if (globalThis.siteLocation.route.attributes.name === 'Login') {
            return true;
        }
        return false;
    }
    // Returns true if current page is search page.
    function isSearchPage() {
        if (globalThis.siteLocation.route.type === 'standard__search') {
            return true;
        }
        return false;
    }
    // Is register page.
    function isRegisterPage() {
        if (globalThis.siteLocation.route.attributes.name === 'Register') {
            return true;
        }
        return false;
    }
    // Returns search term from search page.
    function getSearchTerm() {
        if (isSearchPage()) {
            return globalThis.siteLocation.route.state.term;
        }
        return undefined;
    }
    // Returns search params from search page.
    function getSearchParams() {
        if (isSearchPage()) {
            return new URLSearchParams(globalThis.siteLocation.search);
        }
        return null;
    }
    function getPage$1() {
        return {
            pageTitle: document.title,
            siteName: window.name,
            getSearchTerm: getSearchTerm,
            getSearchParams: getSearchParams,
            getPageType: getPageType$1
        };
    }

    var URI$1 = {exports: {}};

    var punycode$1 = {exports: {}};

    /*! https://mths.be/punycode v1.4.0 by @mathias */

    (function (module, exports) {
    ;(function(root) {

    	/** Detect free variables */
    	var freeExports = 'object' == 'object' && exports &&
    		!exports.nodeType && exports;
    	var freeModule = 'object' == 'object' && module &&
    		!module.nodeType && module;
    	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
    	if (
    		freeGlobal.global === freeGlobal ||
    		freeGlobal.window === freeGlobal ||
    		freeGlobal.self === freeGlobal
    	) {
    		root = freeGlobal;
    	}

    	/**
    	 * The `punycode` object.
    	 * @name punycode
    	 * @type Object
    	 */
    	var punycode,

    	/** Highest positive signed 32-bit float value */
    	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

    	/** Bootstring parameters */
    	base = 36,
    	tMin = 1,
    	tMax = 26,
    	skew = 38,
    	damp = 700,
    	initialBias = 72,
    	initialN = 128, // 0x80
    	delimiter = '-', // '\x2D'

    	/** Regular expressions */
    	regexPunycode = /^xn--/,
    	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
    	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

    	/** Error messages */
    	errors = {
    		'overflow': 'Overflow: input needs wider integers to process',
    		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    		'invalid-input': 'Invalid input'
    	},

    	/** Convenience shortcuts */
    	baseMinusTMin = base - tMin,
    	floor = Math.floor,
    	stringFromCharCode = String.fromCharCode,

    	/** Temporary variable */
    	key;

    	/*--------------------------------------------------------------------------*/

    	/**
    	 * A generic error utility function.
    	 * @private
    	 * @param {String} type The error type.
    	 * @returns {Error} Throws a `RangeError` with the applicable error message.
    	 */
    	function error(type) {
    		throw new RangeError(errors[type]);
    	}

    	/**
    	 * A generic `Array#map` utility function.
    	 * @private
    	 * @param {Array} array The array to iterate over.
    	 * @param {Function} callback The function that gets called for every array
    	 * item.
    	 * @returns {Array} A new array of values returned by the callback function.
    	 */
    	function map(array, fn) {
    		var length = array.length;
    		var result = [];
    		while (length--) {
    			result[length] = fn(array[length]);
    		}
    		return result;
    	}

    	/**
    	 * A simple `Array#map`-like wrapper to work with domain name strings or email
    	 * addresses.
    	 * @private
    	 * @param {String} domain The domain name or email address.
    	 * @param {Function} callback The function that gets called for every
    	 * character.
    	 * @returns {Array} A new string of characters returned by the callback
    	 * function.
    	 */
    	function mapDomain(string, fn) {
    		var parts = string.split('@');
    		var result = '';
    		if (parts.length > 1) {
    			// In email addresses, only the domain name should be punycoded. Leave
    			// the local part (i.e. everything up to `@`) intact.
    			result = parts[0] + '@';
    			string = parts[1];
    		}
    		// Avoid `split(regex)` for IE8 compatibility. See #17.
    		string = string.replace(regexSeparators, '\x2E');
    		var labels = string.split('.');
    		var encoded = map(labels, fn).join('.');
    		return result + encoded;
    	}

    	/**
    	 * Creates an array containing the numeric code points of each Unicode
    	 * character in the string. While JavaScript uses UCS-2 internally,
    	 * this function will convert a pair of surrogate halves (each of which
    	 * UCS-2 exposes as separate characters) into a single code point,
    	 * matching UTF-16.
    	 * @see `punycode.ucs2.encode`
    	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
    	 * @memberOf punycode.ucs2
    	 * @name decode
    	 * @param {String} string The Unicode input string (UCS-2).
    	 * @returns {Array} The new array of code points.
    	 */
    	function ucs2decode(string) {
    		var output = [],
    		    counter = 0,
    		    length = string.length,
    		    value,
    		    extra;
    		while (counter < length) {
    			value = string.charCodeAt(counter++);
    			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
    				// high surrogate, and there is a next character
    				extra = string.charCodeAt(counter++);
    				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
    					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
    				} else {
    					// unmatched surrogate; only append this code unit, in case the next
    					// code unit is the high surrogate of a surrogate pair
    					output.push(value);
    					counter--;
    				}
    			} else {
    				output.push(value);
    			}
    		}
    		return output;
    	}

    	/**
    	 * Creates a string based on an array of numeric code points.
    	 * @see `punycode.ucs2.decode`
    	 * @memberOf punycode.ucs2
    	 * @name encode
    	 * @param {Array} codePoints The array of numeric code points.
    	 * @returns {String} The new Unicode string (UCS-2).
    	 */
    	function ucs2encode(array) {
    		return map(array, function(value) {
    			var output = '';
    			if (value > 0xFFFF) {
    				value -= 0x10000;
    				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
    				value = 0xDC00 | value & 0x3FF;
    			}
    			output += stringFromCharCode(value);
    			return output;
    		}).join('');
    	}

    	/**
    	 * Converts a basic code point into a digit/integer.
    	 * @see `digitToBasic()`
    	 * @private
    	 * @param {Number} codePoint The basic numeric code point value.
    	 * @returns {Number} The numeric value of a basic code point (for use in
    	 * representing integers) in the range `0` to `base - 1`, or `base` if
    	 * the code point does not represent a value.
    	 */
    	function basicToDigit(codePoint) {
    		if (codePoint - 48 < 10) {
    			return codePoint - 22;
    		}
    		if (codePoint - 65 < 26) {
    			return codePoint - 65;
    		}
    		if (codePoint - 97 < 26) {
    			return codePoint - 97;
    		}
    		return base;
    	}

    	/**
    	 * Converts a digit/integer into a basic code point.
    	 * @see `basicToDigit()`
    	 * @private
    	 * @param {Number} digit The numeric value of a basic code point.
    	 * @returns {Number} The basic code point whose value (when used for
    	 * representing integers) is `digit`, which needs to be in the range
    	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
    	 * used; else, the lowercase form is used. The behavior is undefined
    	 * if `flag` is non-zero and `digit` has no uppercase form.
    	 */
    	function digitToBasic(digit, flag) {
    		//  0..25 map to ASCII a..z or A..Z
    		// 26..35 map to ASCII 0..9
    		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    	}

    	/**
    	 * Bias adaptation function as per section 3.4 of RFC 3492.
    	 * https://tools.ietf.org/html/rfc3492#section-3.4
    	 * @private
    	 */
    	function adapt(delta, numPoints, firstTime) {
    		var k = 0;
    		delta = firstTime ? floor(delta / damp) : delta >> 1;
    		delta += floor(delta / numPoints);
    		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
    			delta = floor(delta / baseMinusTMin);
    		}
    		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    	}

    	/**
    	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
    	 * symbols.
    	 * @memberOf punycode
    	 * @param {String} input The Punycode string of ASCII-only symbols.
    	 * @returns {String} The resulting string of Unicode symbols.
    	 */
    	function decode(input) {
    		// Don't use UCS-2
    		var output = [],
    		    inputLength = input.length,
    		    out,
    		    i = 0,
    		    n = initialN,
    		    bias = initialBias,
    		    basic,
    		    j,
    		    index,
    		    oldi,
    		    w,
    		    k,
    		    digit,
    		    t,
    		    /** Cached calculation results */
    		    baseMinusT;

    		// Handle the basic code points: let `basic` be the number of input code
    		// points before the last delimiter, or `0` if there is none, then copy
    		// the first basic code points to the output.

    		basic = input.lastIndexOf(delimiter);
    		if (basic < 0) {
    			basic = 0;
    		}

    		for (j = 0; j < basic; ++j) {
    			// if it's not a basic code point
    			if (input.charCodeAt(j) >= 0x80) {
    				error('not-basic');
    			}
    			output.push(input.charCodeAt(j));
    		}

    		// Main decoding loop: start just after the last delimiter if any basic code
    		// points were copied; start at the beginning otherwise.

    		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

    			// `index` is the index of the next character to be consumed.
    			// Decode a generalized variable-length integer into `delta`,
    			// which gets added to `i`. The overflow checking is easier
    			// if we increase `i` as we go, then subtract off its starting
    			// value at the end to obtain `delta`.
    			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

    				if (index >= inputLength) {
    					error('invalid-input');
    				}

    				digit = basicToDigit(input.charCodeAt(index++));

    				if (digit >= base || digit > floor((maxInt - i) / w)) {
    					error('overflow');
    				}

    				i += digit * w;
    				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

    				if (digit < t) {
    					break;
    				}

    				baseMinusT = base - t;
    				if (w > floor(maxInt / baseMinusT)) {
    					error('overflow');
    				}

    				w *= baseMinusT;

    			}

    			out = output.length + 1;
    			bias = adapt(i - oldi, out, oldi == 0);

    			// `i` was supposed to wrap around from `out` to `0`,
    			// incrementing `n` each time, so we'll fix that now:
    			if (floor(i / out) > maxInt - n) {
    				error('overflow');
    			}

    			n += floor(i / out);
    			i %= out;

    			// Insert `n` at position `i` of the output
    			output.splice(i++, 0, n);

    		}

    		return ucs2encode(output);
    	}

    	/**
    	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
    	 * Punycode string of ASCII-only symbols.
    	 * @memberOf punycode
    	 * @param {String} input The string of Unicode symbols.
    	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
    	 */
    	function encode(input) {
    		var n,
    		    delta,
    		    handledCPCount,
    		    basicLength,
    		    bias,
    		    j,
    		    m,
    		    q,
    		    k,
    		    t,
    		    currentValue,
    		    output = [],
    		    /** `inputLength` will hold the number of code points in `input`. */
    		    inputLength,
    		    /** Cached calculation results */
    		    handledCPCountPlusOne,
    		    baseMinusT,
    		    qMinusT;

    		// Convert the input in UCS-2 to Unicode
    		input = ucs2decode(input);

    		// Cache the length
    		inputLength = input.length;

    		// Initialize the state
    		n = initialN;
    		delta = 0;
    		bias = initialBias;

    		// Handle the basic code points
    		for (j = 0; j < inputLength; ++j) {
    			currentValue = input[j];
    			if (currentValue < 0x80) {
    				output.push(stringFromCharCode(currentValue));
    			}
    		}

    		handledCPCount = basicLength = output.length;

    		// `handledCPCount` is the number of code points that have been handled;
    		// `basicLength` is the number of basic code points.

    		// Finish the basic string - if it is not empty - with a delimiter
    		if (basicLength) {
    			output.push(delimiter);
    		}

    		// Main encoding loop:
    		while (handledCPCount < inputLength) {

    			// All non-basic code points < n have been handled already. Find the next
    			// larger one:
    			for (m = maxInt, j = 0; j < inputLength; ++j) {
    				currentValue = input[j];
    				if (currentValue >= n && currentValue < m) {
    					m = currentValue;
    				}
    			}

    			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    			// but guard against overflow
    			handledCPCountPlusOne = handledCPCount + 1;
    			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
    				error('overflow');
    			}

    			delta += (m - n) * handledCPCountPlusOne;
    			n = m;

    			for (j = 0; j < inputLength; ++j) {
    				currentValue = input[j];

    				if (currentValue < n && ++delta > maxInt) {
    					error('overflow');
    				}

    				if (currentValue == n) {
    					// Represent delta as a generalized variable-length integer
    					for (q = delta, k = base; /* no condition */; k += base) {
    						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
    						if (q < t) {
    							break;
    						}
    						qMinusT = q - t;
    						baseMinusT = base - t;
    						output.push(
    							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
    						);
    						q = floor(qMinusT / baseMinusT);
    					}

    					output.push(stringFromCharCode(digitToBasic(q, 0)));
    					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
    					delta = 0;
    					++handledCPCount;
    				}
    			}

    			++delta;
    			++n;

    		}
    		return output.join('');
    	}

    	/**
    	 * Converts a Punycode string representing a domain name or an email address
    	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
    	 * it doesn't matter if you call it on a string that has already been
    	 * converted to Unicode.
    	 * @memberOf punycode
    	 * @param {String} input The Punycoded domain name or email address to
    	 * convert to Unicode.
    	 * @returns {String} The Unicode representation of the given Punycode
    	 * string.
    	 */
    	function toUnicode(input) {
    		return mapDomain(input, function(string) {
    			return regexPunycode.test(string)
    				? decode(string.slice(4).toLowerCase())
    				: string;
    		});
    	}

    	/**
    	 * Converts a Unicode string representing a domain name or an email address to
    	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
    	 * i.e. it doesn't matter if you call it with a domain that's already in
    	 * ASCII.
    	 * @memberOf punycode
    	 * @param {String} input The domain name or email address to convert, as a
    	 * Unicode string.
    	 * @returns {String} The Punycode representation of the given domain name or
    	 * email address.
    	 */
    	function toASCII(input) {
    		return mapDomain(input, function(string) {
    			return regexNonASCII.test(string)
    				? 'xn--' + encode(string)
    				: string;
    		});
    	}

    	/*--------------------------------------------------------------------------*/

    	/** Define the public API */
    	punycode = {
    		/**
    		 * A string representing the current Punycode.js version number.
    		 * @memberOf punycode
    		 * @type String
    		 */
    		'version': '1.3.2',
    		/**
    		 * An object of methods to convert from JavaScript's internal character
    		 * representation (UCS-2) to Unicode code points, and back.
    		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
    		 * @memberOf punycode
    		 * @type Object
    		 */
    		'ucs2': {
    			'decode': ucs2decode,
    			'encode': ucs2encode
    		},
    		'decode': decode,
    		'encode': encode,
    		'toASCII': toASCII,
    		'toUnicode': toUnicode
    	};

    	/** Expose `punycode` */
    	// Some AMD build optimizers, like r.js, check for specific condition patterns
    	// like the following:
    	if (
    		typeof undefined == 'function' &&
    		typeof undefined.amd == 'object' &&
    		undefined.amd
    	) {
    		undefined('punycode', function() {
    			return punycode;
    		});
    	} else if (freeExports && freeModule) {
    		if (module.exports == freeExports) {
    			// in Node.js, io.js, or RingoJS v0.8.0+
    			freeModule.exports = punycode;
    		} else {
    			// in Narwhal or RingoJS v0.7.0-
    			for (key in punycode) {
    				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    			}
    		}
    	} else {
    		// in Rhino or a web browser
    		root.punycode = punycode;
    	}

    }(commonjsGlobal));
    }(punycode$1, punycode$1.exports));

    var punycode = punycode$1.exports;

    var IPv6$1 = {exports: {}};

    /*!
     * URI.js - Mutating URLs
     * IPv6 Support
     *
     * Version: 1.19.7
     *
     * Author: Rodney Rehm
     * Web: http://medialize.github.io/URI.js/
     *
     * Licensed under
     *   MIT License http://www.opensource.org/licenses/mit-license
     *
     */

    (function (module) {
    (function (root, factory) {
      'use strict';
      // https://github.com/umdjs/umd/blob/master/returnExports.js
      if ('object' === 'object' && module.exports) {
        // Node
        module.exports = factory();
      } else if (typeof undefined === 'function' && undefined.amd) {
        // AMD. Register as an anonymous module.
        undefined(factory);
      } else {
        // Browser globals (root is window)
        root.IPv6 = factory(root);
      }
    }(commonjsGlobal, function (root) {
      'use strict';

      /*
      var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
      var _out = IPv6.best(_in);
      var _expected = "fe80::204:61ff:fe9d:f156";

      console.log(_in, _out, _expected, _out === _expected);
      */

      // save current IPv6 variable, if any
      var _IPv6 = root && root.IPv6;

      function bestPresentation(address) {
        // based on:
        // Javascript to test an IPv6 address for proper format, and to
        // present the "best text representation" according to IETF Draft RFC at
        // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
        // 8 Feb 2010 Rich Brown, Dartware, LLC
        // Please feel free to use this code as long as you provide a link to
        // http://www.intermapper.com
        // http://intermapper.com/support/tools/IPV6-Validator.aspx
        // http://download.dartware.com/thirdparty/ipv6validator.js

        var _address = address.toLowerCase();
        var segments = _address.split(':');
        var length = segments.length;
        var total = 8;

        // trim colons (:: or ::a:b:c… or …a:b:c::)
        if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
          // must have been ::
          // remove first two items
          segments.shift();
          segments.shift();
        } else if (segments[0] === '' && segments[1] === '') {
          // must have been ::xxxx
          // remove the first item
          segments.shift();
        } else if (segments[length - 1] === '' && segments[length - 2] === '') {
          // must have been xxxx::
          segments.pop();
        }

        length = segments.length;

        // adjust total segments for IPv4 trailer
        if (segments[length - 1].indexOf('.') !== -1) {
          // found a "." which means IPv4
          total = 7;
        }

        // fill empty segments them with "0000"
        var pos;
        for (pos = 0; pos < length; pos++) {
          if (segments[pos] === '') {
            break;
          }
        }

        if (pos < total) {
          segments.splice(pos, 1, '0000');
          while (segments.length < total) {
            segments.splice(pos, 0, '0000');
          }
        }

        // strip leading zeros
        var _segments;
        for (var i = 0; i < total; i++) {
          _segments = segments[i].split('');
          for (var j = 0; j < 3 ; j++) {
            if (_segments[0] === '0' && _segments.length > 1) {
              _segments.splice(0,1);
            } else {
              break;
            }
          }

          segments[i] = _segments.join('');
        }

        // find longest sequence of zeroes and coalesce them into one segment
        var best = -1;
        var _best = 0;
        var _current = 0;
        var current = -1;
        var inzeroes = false;
        // i; already declared

        for (i = 0; i < total; i++) {
          if (inzeroes) {
            if (segments[i] === '0') {
              _current += 1;
            } else {
              inzeroes = false;
              if (_current > _best) {
                best = current;
                _best = _current;
              }
            }
          } else {
            if (segments[i] === '0') {
              inzeroes = true;
              current = i;
              _current = 1;
            }
          }
        }

        if (_current > _best) {
          best = current;
          _best = _current;
        }

        if (_best > 1) {
          segments.splice(best, _best, '');
        }

        length = segments.length;

        // assemble remaining segments
        var result = '';
        if (segments[0] === '')  {
          result = ':';
        }

        for (i = 0; i < length; i++) {
          result += segments[i];
          if (i === length - 1) {
            break;
          }

          result += ':';
        }

        if (segments[length - 1] === '') {
          result += ':';
        }

        return result;
      }

      function noConflict() {
        /*jshint validthis: true */
        if (root.IPv6 === this) {
          root.IPv6 = _IPv6;
        }

        return this;
      }

      return {
        best: bestPresentation,
        noConflict: noConflict
      };
    }));
    }(IPv6$1));

    var IPv6 = IPv6$1.exports;

    var SecondLevelDomains$1 = {exports: {}};

    /*!
     * URI.js - Mutating URLs
     * Second Level Domain (SLD) Support
     *
     * Version: 1.19.7
     *
     * Author: Rodney Rehm
     * Web: http://medialize.github.io/URI.js/
     *
     * Licensed under
     *   MIT License http://www.opensource.org/licenses/mit-license
     *
     */

    (function (module) {
    (function (root, factory) {
      'use strict';
      // https://github.com/umdjs/umd/blob/master/returnExports.js
      if ('object' === 'object' && module.exports) {
        // Node
        module.exports = factory();
      } else if (typeof undefined === 'function' && undefined.amd) {
        // AMD. Register as an anonymous module.
        undefined(factory);
      } else {
        // Browser globals (root is window)
        root.SecondLevelDomains = factory(root);
      }
    }(commonjsGlobal, function (root) {
      'use strict';

      // save current SecondLevelDomains variable, if any
      var _SecondLevelDomains = root && root.SecondLevelDomains;

      var SLD = {
        // list of known Second Level Domains
        // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
        // ----
        // publicsuffix.org is more current and actually used by a couple of browsers internally.
        // downside is it also contains domains like "dyndns.org" - which is fine for the security
        // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
        // ----
        list: {
          'ac':' com gov mil net org ',
          'ae':' ac co gov mil name net org pro sch ',
          'af':' com edu gov net org ',
          'al':' com edu gov mil net org ',
          'ao':' co ed gv it og pb ',
          'ar':' com edu gob gov int mil net org tur ',
          'at':' ac co gv or ',
          'au':' asn com csiro edu gov id net org ',
          'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',
          'bb':' biz co com edu gov info net org store tv ',
          'bh':' biz cc com edu gov info net org ',
          'bn':' com edu gov net org ',
          'bo':' com edu gob gov int mil net org tv ',
          'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
          'bs':' com edu gov net org ',
          'bz':' du et om ov rg ',
          'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
          'ck':' biz co edu gen gov info net org ',
          'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
          'co':' com edu gov mil net nom org ',
          'cr':' ac c co ed fi go or sa ',
          'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',
          'do':' art com edu gob gov mil net org sld web ',
          'dz':' art asso com edu gov net org pol ',
          'ec':' com edu fin gov info med mil net org pro ',
          'eg':' com edu eun gov mil name net org sci ',
          'er':' com edu gov ind mil net org rochest w ',
          'es':' com edu gob nom org ',
          'et':' biz com edu gov info name net org ',
          'fj':' ac biz com info mil name net org pro ',
          'fk':' ac co gov net nom org ',
          'fr':' asso com f gouv nom prd presse tm ',
          'gg':' co net org ',
          'gh':' com edu gov mil org ',
          'gn':' ac com gov net org ',
          'gr':' com edu gov mil net org ',
          'gt':' com edu gob ind mil net org ',
          'gu':' com edu gov net org ',
          'hk':' com edu gov idv net org ',
          'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
          'id':' ac co go mil net or sch web ',
          'il':' ac co gov idf k12 muni net org ',
          'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',
          'iq':' com edu gov i mil net org ',
          'ir':' ac co dnssec gov i id net org sch ',
          'it':' edu gov ',
          'je':' co net org ',
          'jo':' com edu gov mil name net org sch ',
          'jp':' ac ad co ed go gr lg ne or ',
          'ke':' ac co go info me mobi ne or sc ',
          'kh':' com edu gov mil net org per ',
          'ki':' biz com de edu gov info mob net org tel ',
          'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
          'kn':' edu gov net org ',
          'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
          'kw':' com edu gov net org ',
          'ky':' com edu gov net org ',
          'kz':' com edu gov mil net org ',
          'lb':' com edu gov net org ',
          'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
          'lr':' com edu gov net org ',
          'lv':' asn com conf edu gov id mil net org ',
          'ly':' com edu gov id med net org plc sch ',
          'ma':' ac co gov m net org press ',
          'mc':' asso tm ',
          'me':' ac co edu gov its net org priv ',
          'mg':' com edu gov mil nom org prd tm ',
          'mk':' com edu gov inf name net org pro ',
          'ml':' com edu gov net org presse ',
          'mn':' edu gov org ',
          'mo':' com edu gov net org ',
          'mt':' com edu gov net org ',
          'mv':' aero biz com coop edu gov info int mil museum name net org pro ',
          'mw':' ac co com coop edu gov int museum net org ',
          'mx':' com edu gob net org ',
          'my':' com edu gov mil name net org sch ',
          'nf':' arts com firm info net other per rec store web ',
          'ng':' biz com edu gov mil mobi name net org sch ',
          'ni':' ac co com edu gob mil net nom org ',
          'np':' com edu gov mil net org ',
          'nr':' biz com edu gov info net org ',
          'om':' ac biz co com edu gov med mil museum net org pro sch ',
          'pe':' com edu gob mil net nom org sld ',
          'ph':' com edu gov i mil net ngo org ',
          'pk':' biz com edu fam gob gok gon gop gos gov net org web ',
          'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
          'pr':' ac biz com edu est gov info isla name net org pro prof ',
          'ps':' com edu gov net org plo sec ',
          'pw':' belau co ed go ne or ',
          'ro':' arts com firm info nom nt org rec store tm www ',
          'rs':' ac co edu gov in org ',
          'sb':' com edu gov net org ',
          'sc':' com edu gov net org ',
          'sh':' co com edu gov net nom org ',
          'sl':' com edu gov net org ',
          'st':' co com consulado edu embaixada gov mil net org principe saotome store ',
          'sv':' com edu gob org red ',
          'sz':' ac co org ',
          'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
          'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
          'tw':' club com ebiz edu game gov idv mil net org ',
          'mu':' ac co com gov net or org ',
          'mz':' ac co edu gov org ',
          'na':' co com ',
          'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',
          'pa':' abo ac com edu gob ing med net nom org sld ',
          'pt':' com edu gov int net nome org publ ',
          'py':' com edu gov mil net org ',
          'qa':' com edu gov mil net org ',
          're':' asso com nom ',
          'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
          'rw':' ac co com edu gouv gov int mil net ',
          'sa':' com edu gov med net org pub sch ',
          'sd':' com edu gov info med net org tv ',
          'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
          'sg':' com edu gov idn net org per ',
          'sn':' art com edu gouv org perso univ ',
          'sy':' com edu gov mil net news org ',
          'th':' ac co go in mi net or ',
          'tj':' ac biz co com edu go gov info int mil name net nic org test web ',
          'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
          'tz':' ac co go ne or ',
          'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
          'ug':' ac co go ne or org sc ',
          'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
          'us':' dni fed isa kids nsn ',
          'uy':' com edu gub mil net org ',
          've':' co com edu gob info mil net org web ',
          'vi':' co com k12 net org ',
          'vn':' ac biz com edu gov health info int name net org pro ',
          'ye':' co com gov ltd me net org plc ',
          'yu':' ac co edu gov org ',
          'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
          'zm':' ac co com edu gov net org sch ',
          // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains
          'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',
          'net': 'gb jp se uk ',
          'org': 'ae',
          'de': 'com '
        },
        // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
        // in both performance and memory footprint. No initialization required.
        // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
        // Following methods use lastIndexOf() rather than array.split() in order
        // to avoid any memory allocations.
        has: function(domain) {
          var tldOffset = domain.lastIndexOf('.');
          if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
            return false;
          }
          var sldOffset = domain.lastIndexOf('.', tldOffset-1);
          if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
            return false;
          }
          var sldList = SLD.list[domain.slice(tldOffset+1)];
          if (!sldList) {
            return false;
          }
          return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;
        },
        is: function(domain) {
          var tldOffset = domain.lastIndexOf('.');
          if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
            return false;
          }
          var sldOffset = domain.lastIndexOf('.', tldOffset-1);
          if (sldOffset >= 0) {
            return false;
          }
          var sldList = SLD.list[domain.slice(tldOffset+1)];
          if (!sldList) {
            return false;
          }
          return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
        },
        get: function(domain) {
          var tldOffset = domain.lastIndexOf('.');
          if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
            return null;
          }
          var sldOffset = domain.lastIndexOf('.', tldOffset-1);
          if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
            return null;
          }
          var sldList = SLD.list[domain.slice(tldOffset+1)];
          if (!sldList) {
            return null;
          }
          if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {
            return null;
          }
          return domain.slice(sldOffset+1);
        },
        noConflict: function(){
          if (root.SecondLevelDomains === this) {
            root.SecondLevelDomains = _SecondLevelDomains;
          }
          return this;
        }
      };

      return SLD;
    }));
    }(SecondLevelDomains$1));

    var SecondLevelDomains = SecondLevelDomains$1.exports;

    /*!
     * URI.js - Mutating URLs
     *
     * Version: 1.19.7
     *
     * Author: Rodney Rehm
     * Web: http://medialize.github.io/URI.js/
     *
     * Licensed under
     *   MIT License http://www.opensource.org/licenses/mit-license
     *
     */

    (function (module) {
    (function (root, factory) {
      'use strict';
      // https://github.com/umdjs/umd/blob/master/returnExports.js
      if ('object' === 'object' && module.exports) {
        // Node
        module.exports = factory(punycode$1.exports, IPv6$1.exports, SecondLevelDomains$1.exports);
      } else if (typeof undefined === 'function' && undefined.amd) {
        // AMD. Register as an anonymous module.
        undefined(['./punycode', './IPv6', './SecondLevelDomains'], factory);
      } else {
        // Browser globals (root is window)
        root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
      }
    }(commonjsGlobal, function (punycode, IPv6, SLD, root) {
      'use strict';
      /*global location, escape, unescape */
      // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
      /*jshint camelcase: false */

      // save current URI variable, if any
      var _URI = root && root.URI;

      function URI(url, base) {
        var _urlSupplied = arguments.length >= 1;
        var _baseSupplied = arguments.length >= 2;

        // Allow instantiation without the 'new' keyword
        if (!(this instanceof URI)) {
          if (_urlSupplied) {
            if (_baseSupplied) {
              return new URI(url, base);
            }

            return new URI(url);
          }

          return new URI();
        }

        if (url === undefined) {
          if (_urlSupplied) {
            throw new TypeError('undefined is not a valid argument for URI');
          }

          if (typeof location !== 'undefined') {
            url = location.href + '';
          } else {
            url = '';
          }
        }

        if (url === null) {
          if (_urlSupplied) {
            throw new TypeError('null is not a valid argument for URI');
          }
        }

        this.href(url);

        // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
        if (base !== undefined) {
          return this.absoluteTo(base);
        }

        return this;
      }

      function isInteger(value) {
        return /^[0-9]+$/.test(value);
      }

      URI.version = '1.19.7';

      var p = URI.prototype;
      var hasOwn = Object.prototype.hasOwnProperty;

      function escapeRegEx(string) {
        // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
        return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
      }

      function getType(value) {
        // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
        if (value === undefined) {
          return 'Undefined';
        }

        return String(Object.prototype.toString.call(value)).slice(8, -1);
      }

      function isArray(obj) {
        return getType(obj) === 'Array';
      }

      function filterArrayValues(data, value) {
        var lookup = {};
        var i, length;

        if (getType(value) === 'RegExp') {
          lookup = null;
        } else if (isArray(value)) {
          for (i = 0, length = value.length; i < length; i++) {
            lookup[value[i]] = true;
          }
        } else {
          lookup[value] = true;
        }

        for (i = 0, length = data.length; i < length; i++) {
          /*jshint laxbreak: true */
          var _match = lookup && lookup[data[i]] !== undefined
            || !lookup && value.test(data[i]);
          /*jshint laxbreak: false */
          if (_match) {
            data.splice(i, 1);
            length--;
            i--;
          }
        }

        return data;
      }

      function arrayContains(list, value) {
        var i, length;

        // value may be string, number, array, regexp
        if (isArray(value)) {
          // Note: this can be optimized to O(n) (instead of current O(m * n))
          for (i = 0, length = value.length; i < length; i++) {
            if (!arrayContains(list, value[i])) {
              return false;
            }
          }

          return true;
        }

        var _type = getType(value);
        for (i = 0, length = list.length; i < length; i++) {
          if (_type === 'RegExp') {
            if (typeof list[i] === 'string' && list[i].match(value)) {
              return true;
            }
          } else if (list[i] === value) {
            return true;
          }
        }

        return false;
      }

      function arraysEqual(one, two) {
        if (!isArray(one) || !isArray(two)) {
          return false;
        }

        // arrays can't be equal if they have different amount of content
        if (one.length !== two.length) {
          return false;
        }

        one.sort();
        two.sort();

        for (var i = 0, l = one.length; i < l; i++) {
          if (one[i] !== two[i]) {
            return false;
          }
        }

        return true;
      }

      function trimSlashes(text) {
        var trim_expression = /^\/+|\/+$/g;
        return text.replace(trim_expression, '');
      }

      URI._parts = function() {
        return {
          protocol: null,
          username: null,
          password: null,
          hostname: null,
          urn: null,
          port: null,
          path: null,
          query: null,
          fragment: null,
          // state
          preventInvalidHostname: URI.preventInvalidHostname,
          duplicateQueryParameters: URI.duplicateQueryParameters,
          escapeQuerySpace: URI.escapeQuerySpace
        };
      };
      // state: throw on invalid hostname
      // see https://github.com/medialize/URI.js/pull/345
      // and https://github.com/medialize/URI.js/issues/354
      URI.preventInvalidHostname = false;
      // state: allow duplicate query parameters (a=1&a=1)
      URI.duplicateQueryParameters = false;
      // state: replaces + with %20 (space in query strings)
      URI.escapeQuerySpace = true;
      // static properties
      URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
      URI.idn_expression = /[^a-z0-9\._-]/i;
      URI.punycode_expression = /(xn--)/i;
      // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
      URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
      // credits to Rich Brown
      // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
      // specification: http://www.ietf.org/rfc/rfc4291.txt
      URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
      // expression used is "gruber revised" (@gruber v2) determined to be the
      // best solution in a regex-golf we did a couple of ages ago at
      // * http://mathiasbynens.be/demo/url-regex
      // * http://rodneyrehm.de/t/url-regex.html
      URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
      URI.findUri = {
        // valid "scheme://" or "www."
        start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
        // everything up to the next whitespace
        end: /[\s\r\n]|$/,
        // trim trailing punctuation captured by end RegExp
        trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
        // balanced parens inclusion (), [], {}, <>
        parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g,
      };
      // http://www.iana.org/assignments/uri-schemes.html
      // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
      URI.defaultPorts = {
        http: '80',
        https: '443',
        ftp: '21',
        gopher: '70',
        ws: '80',
        wss: '443'
      };
      // list of protocols which always require a hostname
      URI.hostProtocols = [
        'http',
        'https'
      ];

      // allowed hostname characters according to RFC 3986
      // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
      // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _
      URI.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/;
      // map DOM Elements to their URI attribute
      URI.domAttributes = {
        'a': 'href',
        'blockquote': 'cite',
        'link': 'href',
        'base': 'href',
        'script': 'src',
        'form': 'action',
        'img': 'src',
        'area': 'href',
        'iframe': 'src',
        'embed': 'src',
        'source': 'src',
        'track': 'src',
        'input': 'src', // but only if type="image"
        'audio': 'src',
        'video': 'src'
      };
      URI.getDomAttribute = function(node) {
        if (!node || !node.nodeName) {
          return undefined;
        }

        var nodeName = node.nodeName.toLowerCase();
        // <input> should only expose src for type="image"
        if (nodeName === 'input' && node.type !== 'image') {
          return undefined;
        }

        return URI.domAttributes[nodeName];
      };

      function escapeForDumbFirefox36(value) {
        // https://github.com/medialize/URI.js/issues/91
        return escape(value);
      }

      // encoding / decoding according to RFC3986
      function strictEncodeURIComponent(string) {
        // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
        return encodeURIComponent(string)
          .replace(/[!'()*]/g, escapeForDumbFirefox36)
          .replace(/\*/g, '%2A');
      }
      URI.encode = strictEncodeURIComponent;
      URI.decode = decodeURIComponent;
      URI.iso8859 = function() {
        URI.encode = escape;
        URI.decode = unescape;
      };
      URI.unicode = function() {
        URI.encode = strictEncodeURIComponent;
        URI.decode = decodeURIComponent;
      };
      URI.characters = {
        pathname: {
          encode: {
            // RFC3986 2.1: For consistency, URI producers and normalizers should
            // use uppercase hexadecimal digits for all percent-encodings.
            expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
            map: {
              // -._~!'()*
              '%24': '$',
              '%26': '&',
              '%2B': '+',
              '%2C': ',',
              '%3B': ';',
              '%3D': '=',
              '%3A': ':',
              '%40': '@'
            }
          },
          decode: {
            expression: /[\/\?#]/g,
            map: {
              '/': '%2F',
              '?': '%3F',
              '#': '%23'
            }
          }
        },
        reserved: {
          encode: {
            // RFC3986 2.1: For consistency, URI producers and normalizers should
            // use uppercase hexadecimal digits for all percent-encodings.
            expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
            map: {
              // gen-delims
              '%3A': ':',
              '%2F': '/',
              '%3F': '?',
              '%23': '#',
              '%5B': '[',
              '%5D': ']',
              '%40': '@',
              // sub-delims
              '%21': '!',
              '%24': '$',
              '%26': '&',
              '%27': '\'',
              '%28': '(',
              '%29': ')',
              '%2A': '*',
              '%2B': '+',
              '%2C': ',',
              '%3B': ';',
              '%3D': '='
            }
          }
        },
        urnpath: {
          // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
          // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
          // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
          // note that the colon character is not featured in the encoding map; this is because URI.js
          // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
          // should not appear unencoded in a segment itself.
          // See also the note above about RFC3986 and capitalalized hex digits.
          encode: {
            expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
            map: {
              '%21': '!',
              '%24': '$',
              '%27': '\'',
              '%28': '(',
              '%29': ')',
              '%2A': '*',
              '%2B': '+',
              '%2C': ',',
              '%3B': ';',
              '%3D': '=',
              '%40': '@'
            }
          },
          // These characters are the characters called out by RFC2141 as "reserved" characters that
          // should never appear in a URN, plus the colon character (see note above).
          decode: {
            expression: /[\/\?#:]/g,
            map: {
              '/': '%2F',
              '?': '%3F',
              '#': '%23',
              ':': '%3A'
            }
          }
        }
      };
      URI.encodeQuery = function(string, escapeQuerySpace) {
        var escaped = URI.encode(string + '');
        if (escapeQuerySpace === undefined) {
          escapeQuerySpace = URI.escapeQuerySpace;
        }

        return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
      };
      URI.decodeQuery = function(string, escapeQuerySpace) {
        string += '';
        if (escapeQuerySpace === undefined) {
          escapeQuerySpace = URI.escapeQuerySpace;
        }

        try {
          return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
        } catch(e) {
          // we're not going to mess with weird encodings,
          // give up and return the undecoded original string
          // see https://github.com/medialize/URI.js/issues/87
          // see https://github.com/medialize/URI.js/issues/92
          return string;
        }
      };
      // generate encode/decode path functions
      var _parts = {'encode':'encode', 'decode':'decode'};
      var _part;
      var generateAccessor = function(_group, _part) {
        return function(string) {
          try {
            return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {
              return URI.characters[_group][_part].map[c];
            });
          } catch (e) {
            // we're not going to mess with weird encodings,
            // give up and return the undecoded original string
            // see https://github.com/medialize/URI.js/issues/87
            // see https://github.com/medialize/URI.js/issues/92
            return string;
          }
        };
      };

      for (_part in _parts) {
        URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
        URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
      }

      var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
        return function(string) {
          // Why pass in names of functions, rather than the function objects themselves? The
          // definitions of some functions (but in particular, URI.decode) will occasionally change due
          // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
          // that the functions we use here are "fresh".
          var actualCodingFunc;
          if (!_innerCodingFuncName) {
            actualCodingFunc = URI[_codingFuncName];
          } else {
            actualCodingFunc = function(string) {
              return URI[_codingFuncName](URI[_innerCodingFuncName](string));
            };
          }

          var segments = (string + '').split(_sep);

          for (var i = 0, length = segments.length; i < length; i++) {
            segments[i] = actualCodingFunc(segments[i]);
          }

          return segments.join(_sep);
        };
      };

      // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.
      URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
      URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
      URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
      URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');

      URI.encodeReserved = generateAccessor('reserved', 'encode');

      URI.parse = function(string, parts) {
        var pos;
        if (!parts) {
          parts = {
            preventInvalidHostname: URI.preventInvalidHostname
          };
        }
        // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]

        // extract fragment
        pos = string.indexOf('#');
        if (pos > -1) {
          // escaping?
          parts.fragment = string.substring(pos + 1) || null;
          string = string.substring(0, pos);
        }

        // extract query
        pos = string.indexOf('?');
        if (pos > -1) {
          // escaping?
          parts.query = string.substring(pos + 1) || null;
          string = string.substring(0, pos);
        }

        // slashes and backslashes have lost all meaning for the web protocols (https, http, wss, ws)
        string = string.replace(/^(https?|ftp|wss?)?:[/\\]*/, '$1://');

        // extract protocol
        if (string.substring(0, 2) === '//') {
          // relative-scheme
          parts.protocol = null;
          string = string.substring(2);
          // extract "user:pass@host:port"
          string = URI.parseAuthority(string, parts);
        } else {
          pos = string.indexOf(':');
          if (pos > -1) {
            parts.protocol = string.substring(0, pos) || null;
            if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
              // : may be within the path
              parts.protocol = undefined;
            } else if (string.substring(pos + 1, pos + 3).replace(/\\/g, '/') === '//') {
              string = string.substring(pos + 3);

              // extract "user:pass@host:port"
              string = URI.parseAuthority(string, parts);
            } else {
              string = string.substring(pos + 1);
              parts.urn = true;
            }
          }
        }

        // what's left must be the path
        parts.path = string;

        // and we're done
        return parts;
      };
      URI.parseHost = function(string, parts) {
        if (!string) {
          string = '';
        }

        // Copy chrome, IE, opera backslash-handling behavior.
        // Back slashes before the query string get converted to forward slashes
        // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
        // See: https://code.google.com/p/chromium/issues/detail?id=25916
        // https://github.com/medialize/URI.js/pull/233
        string = string.replace(/\\/g, '/');

        // extract host:port
        var pos = string.indexOf('/');
        var bracketPos;
        var t;

        if (pos === -1) {
          pos = string.length;
        }

        if (string.charAt(0) === '[') {
          // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
          // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
          // IPv6+port in the format [2001:db8::1]:80 (for the time being)
          bracketPos = string.indexOf(']');
          parts.hostname = string.substring(1, bracketPos) || null;
          parts.port = string.substring(bracketPos + 2, pos) || null;
          if (parts.port === '/') {
            parts.port = null;
          }
        } else {
          var firstColon = string.indexOf(':');
          var firstSlash = string.indexOf('/');
          var nextColon = string.indexOf(':', firstColon + 1);
          if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
            // IPv6 host contains multiple colons - but no port
            // this notation is actually not allowed by RFC 3986, but we're a liberal parser
            parts.hostname = string.substring(0, pos) || null;
            parts.port = null;
          } else {
            t = string.substring(0, pos).split(':');
            parts.hostname = t[0] || null;
            parts.port = t[1] || null;
          }
        }

        if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
          pos++;
          string = '/' + string;
        }

        if (parts.preventInvalidHostname) {
          URI.ensureValidHostname(parts.hostname, parts.protocol);
        }

        if (parts.port) {
          URI.ensureValidPort(parts.port);
        }

        return string.substring(pos) || '/';
      };
      URI.parseAuthority = function(string, parts) {
        string = URI.parseUserinfo(string, parts);
        return URI.parseHost(string, parts);
      };
      URI.parseUserinfo = function(string, parts) {
        // extract username:password
        var _string = string;
        var firstBackSlash = string.indexOf('\\');
        if (firstBackSlash !== -1) {
          string = string.replace(/\\/g, '/');
        }
        var firstSlash = string.indexOf('/');
        var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
        var t;

        // authority@ must come before /path or \path
        if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
          t = string.substring(0, pos).split(':');
          parts.username = t[0] ? URI.decode(t[0]) : null;
          t.shift();
          parts.password = t[0] ? URI.decode(t.join(':')) : null;
          string = _string.substring(pos + 1);
        } else {
          parts.username = null;
          parts.password = null;
        }

        return string;
      };
      URI.parseQuery = function(string, escapeQuerySpace) {
        if (!string) {
          return {};
        }

        // throw out the funky business - "?"[name"="value"&"]+
        string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

        if (!string) {
          return {};
        }

        var items = {};
        var splits = string.split('&');
        var length = splits.length;
        var v, name, value;

        for (var i = 0; i < length; i++) {
          v = splits[i].split('=');
          name = URI.decodeQuery(v.shift(), escapeQuerySpace);
          // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
          value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

          if (name === '__proto__') {
            // ignore attempt at exploiting JavaScript internals
            continue;
          } else if (hasOwn.call(items, name)) {
            if (typeof items[name] === 'string' || items[name] === null) {
              items[name] = [items[name]];
            }

            items[name].push(value);
          } else {
            items[name] = value;
          }
        }

        return items;
      };

      URI.build = function(parts) {
        var t = '';
        var requireAbsolutePath = false;

        if (parts.protocol) {
          t += parts.protocol + ':';
        }

        if (!parts.urn && (t || parts.hostname)) {
          t += '//';
          requireAbsolutePath = true;
        }

        t += (URI.buildAuthority(parts) || '');

        if (typeof parts.path === 'string') {
          if (parts.path.charAt(0) !== '/' && requireAbsolutePath) {
            t += '/';
          }

          t += parts.path;
        }

        if (typeof parts.query === 'string' && parts.query) {
          t += '?' + parts.query;
        }

        if (typeof parts.fragment === 'string' && parts.fragment) {
          t += '#' + parts.fragment;
        }
        return t;
      };
      URI.buildHost = function(parts) {
        var t = '';

        if (!parts.hostname) {
          return '';
        } else if (URI.ip6_expression.test(parts.hostname)) {
          t += '[' + parts.hostname + ']';
        } else {
          t += parts.hostname;
        }

        if (parts.port) {
          t += ':' + parts.port;
        }

        return t;
      };
      URI.buildAuthority = function(parts) {
        return URI.buildUserinfo(parts) + URI.buildHost(parts);
      };
      URI.buildUserinfo = function(parts) {
        var t = '';

        if (parts.username) {
          t += URI.encode(parts.username);
        }

        if (parts.password) {
          t += ':' + URI.encode(parts.password);
        }

        if (t) {
          t += '@';
        }

        return t;
      };
      URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
        // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
        // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
        // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
        // URI.js treats the query string as being application/x-www-form-urlencoded
        // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type

        var t = '';
        var unique, key, i, length;
        for (key in data) {
          if (key === '__proto__') {
            // ignore attempt at exploiting JavaScript internals
            continue;
          } else if (hasOwn.call(data, key)) {
            if (isArray(data[key])) {
              unique = {};
              for (i = 0, length = data[key].length; i < length; i++) {
                if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
                  t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
                  if (duplicateQueryParameters !== true) {
                    unique[data[key][i] + ''] = true;
                  }
                }
              }
            } else if (data[key] !== undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
            }
          }
        }

        return t.substring(1);
      };
      URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
        // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
        // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
        return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
      };

      URI.addQuery = function(data, name, value) {
        if (typeof name === 'object') {
          for (var key in name) {
            if (hasOwn.call(name, key)) {
              URI.addQuery(data, key, name[key]);
            }
          }
        } else if (typeof name === 'string') {
          if (data[name] === undefined) {
            data[name] = value;
            return;
          } else if (typeof data[name] === 'string') {
            data[name] = [data[name]];
          }

          if (!isArray(value)) {
            value = [value];
          }

          data[name] = (data[name] || []).concat(value);
        } else {
          throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
        }
      };

      URI.setQuery = function(data, name, value) {
        if (typeof name === 'object') {
          for (var key in name) {
            if (hasOwn.call(name, key)) {
              URI.setQuery(data, key, name[key]);
            }
          }
        } else if (typeof name === 'string') {
          data[name] = value === undefined ? null : value;
        } else {
          throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');
        }
      };

      URI.removeQuery = function(data, name, value) {
        var i, length, key;

        if (isArray(name)) {
          for (i = 0, length = name.length; i < length; i++) {
            data[name[i]] = undefined;
          }
        } else if (getType(name) === 'RegExp') {
          for (key in data) {
            if (name.test(key)) {
              data[key] = undefined;
            }
          }
        } else if (typeof name === 'object') {
          for (key in name) {
            if (hasOwn.call(name, key)) {
              URI.removeQuery(data, key, name[key]);
            }
          }
        } else if (typeof name === 'string') {
          if (value !== undefined) {
            if (getType(value) === 'RegExp') {
              if (!isArray(data[name]) && value.test(data[name])) {
                data[name] = undefined;
              } else {
                data[name] = filterArrayValues(data[name], value);
              }
            } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
              data[name] = undefined;
            } else if (isArray(data[name])) {
              data[name] = filterArrayValues(data[name], value);
            }
          } else {
            data[name] = undefined;
          }
        } else {
          throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
        }
      };
      URI.hasQuery = function(data, name, value, withinArray) {
        switch (getType(name)) {
          case 'String':
            // Nothing to do here
            break;

          case 'RegExp':
            for (var key in data) {
              if (hasOwn.call(data, key)) {
                if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
                  return true;
                }
              }
            }

            return false;

          case 'Object':
            for (var _key in name) {
              if (hasOwn.call(name, _key)) {
                if (!URI.hasQuery(data, _key, name[_key])) {
                  return false;
                }
              }
            }

            return true;

          default:
            throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
        }

        switch (getType(value)) {
          case 'Undefined':
            // true if exists (but may be empty)
            return name in data; // data[name] !== undefined;

          case 'Boolean':
            // true if exists and non-empty
            var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
            return value === _booly;

          case 'Function':
            // allow complex comparison
            return !!value(data[name], name, data);

          case 'Array':
            if (!isArray(data[name])) {
              return false;
            }

            var op = withinArray ? arrayContains : arraysEqual;
            return op(data[name], value);

          case 'RegExp':
            if (!isArray(data[name])) {
              return Boolean(data[name] && data[name].match(value));
            }

            if (!withinArray) {
              return false;
            }

            return arrayContains(data[name], value);

          case 'Number':
            value = String(value);
            /* falls through */
          case 'String':
            if (!isArray(data[name])) {
              return data[name] === value;
            }

            if (!withinArray) {
              return false;
            }

            return arrayContains(data[name], value);

          default:
            throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
        }
      };


      URI.joinPaths = function() {
        var input = [];
        var segments = [];
        var nonEmptySegments = 0;

        for (var i = 0; i < arguments.length; i++) {
          var url = new URI(arguments[i]);
          input.push(url);
          var _segments = url.segment();
          for (var s = 0; s < _segments.length; s++) {
            if (typeof _segments[s] === 'string') {
              segments.push(_segments[s]);
            }

            if (_segments[s]) {
              nonEmptySegments++;
            }
          }
        }

        if (!segments.length || !nonEmptySegments) {
          return new URI('');
        }

        var uri = new URI('').segment(segments);

        if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {
          uri.path('/' + uri.path());
        }

        return uri.normalize();
      };

      URI.commonPath = function(one, two) {
        var length = Math.min(one.length, two.length);
        var pos;

        // find first non-matching character
        for (pos = 0; pos < length; pos++) {
          if (one.charAt(pos) !== two.charAt(pos)) {
            pos--;
            break;
          }
        }

        if (pos < 1) {
          return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
        }

        // revert to last /
        if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
          pos = one.substring(0, pos).lastIndexOf('/');
        }

        return one.substring(0, pos + 1);
      };

      URI.withinString = function(string, callback, options) {
        options || (options = {});
        var _start = options.start || URI.findUri.start;
        var _end = options.end || URI.findUri.end;
        var _trim = options.trim || URI.findUri.trim;
        var _parens = options.parens || URI.findUri.parens;
        var _attributeOpen = /[a-z0-9-]=["']?$/i;

        _start.lastIndex = 0;
        while (true) {
          var match = _start.exec(string);
          if (!match) {
            break;
          }

          var start = match.index;
          if (options.ignoreHtml) {
            // attribut(e=["']?$)
            var attributeOpen = string.slice(Math.max(start - 3, 0), start);
            if (attributeOpen && _attributeOpen.test(attributeOpen)) {
              continue;
            }
          }

          var end = start + string.slice(start).search(_end);
          var slice = string.slice(start, end);
          // make sure we include well balanced parens
          var parensEnd = -1;
          while (true) {
            var parensMatch = _parens.exec(slice);
            if (!parensMatch) {
              break;
            }

            var parensMatchEnd = parensMatch.index + parensMatch[0].length;
            parensEnd = Math.max(parensEnd, parensMatchEnd);
          }

          if (parensEnd > -1) {
            slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');
          } else {
            slice = slice.replace(_trim, '');
          }

          if (slice.length <= match[0].length) {
            // the extract only contains the starting marker of a URI,
            // e.g. "www" or "http://"
            continue;
          }

          if (options.ignore && options.ignore.test(slice)) {
            continue;
          }

          end = start + slice.length;
          var result = callback(slice, start, end, string);
          if (result === undefined) {
            _start.lastIndex = end;
            continue;
          }

          result = String(result);
          string = string.slice(0, start) + result + string.slice(end);
          _start.lastIndex = start + result.length;
        }

        _start.lastIndex = 0;
        return string;
      };

      URI.ensureValidHostname = function(v, protocol) {
        // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
        // they are not part of DNS and therefore ignored by URI.js

        var hasHostname = !!v; // not null and not an empty string
        var hasProtocol = !!protocol;
        var rejectEmptyHostname = false;

        if (hasProtocol) {
          rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);
        }

        if (rejectEmptyHostname && !hasHostname) {
          throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);
        } else if (v && v.match(URI.invalid_hostname_characters)) {
          // test punycode
          if (!punycode) {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
          }
          if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_]');
          }
        }
      };

      URI.ensureValidPort = function (v) {
        if (!v) {
          return;
        }

        var port = Number(v);
        if (isInteger(port) && (port > 0) && (port < 65536)) {
          return;
        }

        throw new TypeError('Port "' + v + '" is not a valid port');
      };

      // noConflict
      URI.noConflict = function(removeAll) {
        if (removeAll) {
          var unconflicted = {
            URI: this.noConflict()
          };

          if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
            unconflicted.URITemplate = root.URITemplate.noConflict();
          }

          if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
            unconflicted.IPv6 = root.IPv6.noConflict();
          }

          if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
            unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
          }

          return unconflicted;
        } else if (root.URI === this) {
          root.URI = _URI;
        }

        return this;
      };

      p.build = function(deferBuild) {
        if (deferBuild === true) {
          this._deferred_build = true;
        } else if (deferBuild === undefined || this._deferred_build) {
          this._string = URI.build(this._parts);
          this._deferred_build = false;
        }

        return this;
      };

      p.clone = function() {
        return new URI(this);
      };

      p.valueOf = p.toString = function() {
        return this.build(false)._string;
      };


      function generateSimpleAccessor(_part){
        return function(v, build) {
          if (v === undefined) {
            return this._parts[_part] || '';
          } else {
            this._parts[_part] = v || null;
            this.build(!build);
            return this;
          }
        };
      }

      function generatePrefixAccessor(_part, _key){
        return function(v, build) {
          if (v === undefined) {
            return this._parts[_part] || '';
          } else {
            if (v !== null) {
              v = v + '';
              if (v.charAt(0) === _key) {
                v = v.substring(1);
              }
            }

            this._parts[_part] = v;
            this.build(!build);
            return this;
          }
        };
      }

      p.protocol = generateSimpleAccessor('protocol');
      p.username = generateSimpleAccessor('username');
      p.password = generateSimpleAccessor('password');
      p.hostname = generateSimpleAccessor('hostname');
      p.port = generateSimpleAccessor('port');
      p.query = generatePrefixAccessor('query', '?');
      p.fragment = generatePrefixAccessor('fragment', '#');

      p.search = function(v, build) {
        var t = this.query(v, build);
        return typeof t === 'string' && t.length ? ('?' + t) : t;
      };
      p.hash = function(v, build) {
        var t = this.fragment(v, build);
        return typeof t === 'string' && t.length ? ('#' + t) : t;
      };

      p.pathname = function(v, build) {
        if (v === undefined || v === true) {
          var res = this._parts.path || (this._parts.hostname ? '/' : '');
          return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
        } else {
          if (this._parts.urn) {
            this._parts.path = v ? URI.recodeUrnPath(v) : '';
          } else {
            this._parts.path = v ? URI.recodePath(v) : '/';
          }
          this.build(!build);
          return this;
        }
      };
      p.path = p.pathname;
      p.href = function(href, build) {
        var key;

        if (href === undefined) {
          return this.toString();
        }

        this._string = '';
        this._parts = URI._parts();

        var _URI = href instanceof URI;
        var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
        if (href.nodeName) {
          var attribute = URI.getDomAttribute(href);
          href = href[attribute] || '';
          _object = false;
        }

        // window.location is reported to be an object, but it's not the sort
        // of object we're looking for:
        // * location.protocol ends with a colon
        // * location.query != object.search
        // * location.hash != object.fragment
        // simply serializing the unknown object should do the trick
        // (for location, not for everything...)
        if (!_URI && _object && href.pathname !== undefined) {
          href = href.toString();
        }

        if (typeof href === 'string' || href instanceof String) {
          this._parts = URI.parse(String(href), this._parts);
        } else if (_URI || _object) {
          var src = _URI ? href._parts : href;
          for (key in src) {
            if (key === 'query') { continue; }
            if (hasOwn.call(this._parts, key)) {
              this._parts[key] = src[key];
            }
          }
          if (src.query) {
            this.query(src.query, false);
          }
        } else {
          throw new TypeError('invalid input');
        }

        this.build(!build);
        return this;
      };

      // identification accessors
      p.is = function(what) {
        var ip = false;
        var ip4 = false;
        var ip6 = false;
        var name = false;
        var sld = false;
        var idn = false;
        var punycode = false;
        var relative = !this._parts.urn;

        if (this._parts.hostname) {
          relative = false;
          ip4 = URI.ip4_expression.test(this._parts.hostname);
          ip6 = URI.ip6_expression.test(this._parts.hostname);
          ip = ip4 || ip6;
          name = !ip;
          sld = name && SLD && SLD.has(this._parts.hostname);
          idn = name && URI.idn_expression.test(this._parts.hostname);
          punycode = name && URI.punycode_expression.test(this._parts.hostname);
        }

        switch (what.toLowerCase()) {
          case 'relative':
            return relative;

          case 'absolute':
            return !relative;

          // hostname identification
          case 'domain':
          case 'name':
            return name;

          case 'sld':
            return sld;

          case 'ip':
            return ip;

          case 'ip4':
          case 'ipv4':
          case 'inet4':
            return ip4;

          case 'ip6':
          case 'ipv6':
          case 'inet6':
            return ip6;

          case 'idn':
            return idn;

          case 'url':
            return !this._parts.urn;

          case 'urn':
            return !!this._parts.urn;

          case 'punycode':
            return punycode;
        }

        return null;
      };

      // component specific input validation
      var _protocol = p.protocol;
      var _port = p.port;
      var _hostname = p.hostname;

      p.protocol = function(v, build) {
        if (v) {
          // accept trailing ://
          v = v.replace(/:(\/\/)?$/, '');

          if (!v.match(URI.protocol_expression)) {
            throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
          }
        }

        return _protocol.call(this, v, build);
      };
      p.scheme = p.protocol;
      p.port = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (v !== undefined) {
          if (v === 0) {
            v = null;
          }

          if (v) {
            v += '';
            if (v.charAt(0) === ':') {
              v = v.substring(1);
            }

            URI.ensureValidPort(v);
          }
        }
        return _port.call(this, v, build);
      };
      p.hostname = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (v !== undefined) {
          var x = { preventInvalidHostname: this._parts.preventInvalidHostname };
          var res = URI.parseHost(v, x);
          if (res !== '/') {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
          }

          v = x.hostname;
          if (this._parts.preventInvalidHostname) {
            URI.ensureValidHostname(v, this._parts.protocol);
          }
        }

        return _hostname.call(this, v, build);
      };

      // compound accessors
      p.origin = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (v === undefined) {
          var protocol = this.protocol();
          var authority = this.authority();
          if (!authority) {
            return '';
          }

          return (protocol ? protocol + '://' : '') + this.authority();
        } else {
          var origin = URI(v);
          this
            .protocol(origin.protocol())
            .authority(origin.authority())
            .build(!build);
          return this;
        }
      };
      p.host = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (v === undefined) {
          return this._parts.hostname ? URI.buildHost(this._parts) : '';
        } else {
          var res = URI.parseHost(v, this._parts);
          if (res !== '/') {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
          }

          this.build(!build);
          return this;
        }
      };
      p.authority = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (v === undefined) {
          return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
        } else {
          var res = URI.parseAuthority(v, this._parts);
          if (res !== '/') {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
          }

          this.build(!build);
          return this;
        }
      };
      p.userinfo = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (v === undefined) {
          var t = URI.buildUserinfo(this._parts);
          return t ? t.substring(0, t.length -1) : t;
        } else {
          if (v[v.length-1] !== '@') {
            v += '@';
          }

          URI.parseUserinfo(v, this._parts);
          this.build(!build);
          return this;
        }
      };
      p.resource = function(v, build) {
        var parts;

        if (v === undefined) {
          return this.path() + this.search() + this.hash();
        }

        parts = URI.parse(v);
        this._parts.path = parts.path;
        this._parts.query = parts.query;
        this._parts.fragment = parts.fragment;
        this.build(!build);
        return this;
      };

      // fraction accessors
      p.subdomain = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        // convenience, return "www" from "www.example.org"
        if (v === undefined) {
          if (!this._parts.hostname || this.is('IP')) {
            return '';
          }

          // grab domain and add another segment
          var end = this._parts.hostname.length - this.domain().length - 1;
          return this._parts.hostname.substring(0, end) || '';
        } else {
          var e = this._parts.hostname.length - this.domain().length;
          var sub = this._parts.hostname.substring(0, e);
          var replace = new RegExp('^' + escapeRegEx(sub));

          if (v && v.charAt(v.length - 1) !== '.') {
            v += '.';
          }

          if (v.indexOf(':') !== -1) {
            throw new TypeError('Domains cannot contain colons');
          }

          if (v) {
            URI.ensureValidHostname(v, this._parts.protocol);
          }

          this._parts.hostname = this._parts.hostname.replace(replace, v);
          this.build(!build);
          return this;
        }
      };
      p.domain = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (typeof v === 'boolean') {
          build = v;
          v = undefined;
        }

        // convenience, return "example.org" from "www.example.org"
        if (v === undefined) {
          if (!this._parts.hostname || this.is('IP')) {
            return '';
          }

          // if hostname consists of 1 or 2 segments, it must be the domain
          var t = this._parts.hostname.match(/\./g);
          if (t && t.length < 2) {
            return this._parts.hostname;
          }

          // grab tld and add another segment
          var end = this._parts.hostname.length - this.tld(build).length - 1;
          end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
          return this._parts.hostname.substring(end) || '';
        } else {
          if (!v) {
            throw new TypeError('cannot set domain empty');
          }

          if (v.indexOf(':') !== -1) {
            throw new TypeError('Domains cannot contain colons');
          }

          URI.ensureValidHostname(v, this._parts.protocol);

          if (!this._parts.hostname || this.is('IP')) {
            this._parts.hostname = v;
          } else {
            var replace = new RegExp(escapeRegEx(this.domain()) + '$');
            this._parts.hostname = this._parts.hostname.replace(replace, v);
          }

          this.build(!build);
          return this;
        }
      };
      p.tld = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (typeof v === 'boolean') {
          build = v;
          v = undefined;
        }

        // return "org" from "www.example.org"
        if (v === undefined) {
          if (!this._parts.hostname || this.is('IP')) {
            return '';
          }

          var pos = this._parts.hostname.lastIndexOf('.');
          var tld = this._parts.hostname.substring(pos + 1);

          if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
            return SLD.get(this._parts.hostname) || tld;
          }

          return tld;
        } else {
          var replace;

          if (!v) {
            throw new TypeError('cannot set TLD empty');
          } else if (v.match(/[^a-zA-Z0-9-]/)) {
            if (SLD && SLD.is(v)) {
              replace = new RegExp(escapeRegEx(this.tld()) + '$');
              this._parts.hostname = this._parts.hostname.replace(replace, v);
            } else {
              throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
            }
          } else if (!this._parts.hostname || this.is('IP')) {
            throw new ReferenceError('cannot set TLD on non-domain host');
          } else {
            replace = new RegExp(escapeRegEx(this.tld()) + '$');
            this._parts.hostname = this._parts.hostname.replace(replace, v);
          }

          this.build(!build);
          return this;
        }
      };
      p.directory = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (v === undefined || v === true) {
          if (!this._parts.path && !this._parts.hostname) {
            return '';
          }

          if (this._parts.path === '/') {
            return '/';
          }

          var end = this._parts.path.length - this.filename().length - 1;
          var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');

          return v ? URI.decodePath(res) : res;

        } else {
          var e = this._parts.path.length - this.filename().length;
          var directory = this._parts.path.substring(0, e);
          var replace = new RegExp('^' + escapeRegEx(directory));

          // fully qualifier directories begin with a slash
          if (!this.is('relative')) {
            if (!v) {
              v = '/';
            }

            if (v.charAt(0) !== '/') {
              v = '/' + v;
            }
          }

          // directories always end with a slash
          if (v && v.charAt(v.length - 1) !== '/') {
            v += '/';
          }

          v = URI.recodePath(v);
          this._parts.path = this._parts.path.replace(replace, v);
          this.build(!build);
          return this;
        }
      };
      p.filename = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (typeof v !== 'string') {
          if (!this._parts.path || this._parts.path === '/') {
            return '';
          }

          var pos = this._parts.path.lastIndexOf('/');
          var res = this._parts.path.substring(pos+1);

          return v ? URI.decodePathSegment(res) : res;
        } else {
          var mutatedDirectory = false;

          if (v.charAt(0) === '/') {
            v = v.substring(1);
          }

          if (v.match(/\.?\//)) {
            mutatedDirectory = true;
          }

          var replace = new RegExp(escapeRegEx(this.filename()) + '$');
          v = URI.recodePath(v);
          this._parts.path = this._parts.path.replace(replace, v);

          if (mutatedDirectory) {
            this.normalizePath(build);
          } else {
            this.build(!build);
          }

          return this;
        }
      };
      p.suffix = function(v, build) {
        if (this._parts.urn) {
          return v === undefined ? '' : this;
        }

        if (v === undefined || v === true) {
          if (!this._parts.path || this._parts.path === '/') {
            return '';
          }

          var filename = this.filename();
          var pos = filename.lastIndexOf('.');
          var s, res;

          if (pos === -1) {
            return '';
          }

          // suffix may only contain alnum characters (yup, I made this up.)
          s = filename.substring(pos+1);
          res = (/^[a-z0-9%]+$/i).test(s) ? s : '';
          return v ? URI.decodePathSegment(res) : res;
        } else {
          if (v.charAt(0) === '.') {
            v = v.substring(1);
          }

          var suffix = this.suffix();
          var replace;

          if (!suffix) {
            if (!v) {
              return this;
            }

            this._parts.path += '.' + URI.recodePath(v);
          } else if (!v) {
            replace = new RegExp(escapeRegEx('.' + suffix) + '$');
          } else {
            replace = new RegExp(escapeRegEx(suffix) + '$');
          }

          if (replace) {
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
          }

          this.build(!build);
          return this;
        }
      };
      p.segment = function(segment, v, build) {
        var separator = this._parts.urn ? ':' : '/';
        var path = this.path();
        var absolute = path.substring(0, 1) === '/';
        var segments = path.split(separator);

        if (segment !== undefined && typeof segment !== 'number') {
          build = v;
          v = segment;
          segment = undefined;
        }

        if (segment !== undefined && typeof segment !== 'number') {
          throw new Error('Bad segment "' + segment + '", must be 0-based integer');
        }

        if (absolute) {
          segments.shift();
        }

        if (segment < 0) {
          // allow negative indexes to address from the end
          segment = Math.max(segments.length + segment, 0);
        }

        if (v === undefined) {
          /*jshint laxbreak: true */
          return segment === undefined
            ? segments
            : segments[segment];
          /*jshint laxbreak: false */
        } else if (segment === null || segments[segment] === undefined) {
          if (isArray(v)) {
            segments = [];
            // collapse empty elements within array
            for (var i=0, l=v.length; i < l; i++) {
              if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
                continue;
              }

              if (segments.length && !segments[segments.length -1].length) {
                segments.pop();
              }

              segments.push(trimSlashes(v[i]));
            }
          } else if (v || typeof v === 'string') {
            v = trimSlashes(v);
            if (segments[segments.length -1] === '') {
              // empty trailing elements have to be overwritten
              // to prevent results such as /foo//bar
              segments[segments.length -1] = v;
            } else {
              segments.push(v);
            }
          }
        } else {
          if (v) {
            segments[segment] = trimSlashes(v);
          } else {
            segments.splice(segment, 1);
          }
        }

        if (absolute) {
          segments.unshift('');
        }

        return this.path(segments.join(separator), build);
      };
      p.segmentCoded = function(segment, v, build) {
        var segments, i, l;

        if (typeof segment !== 'number') {
          build = v;
          v = segment;
          segment = undefined;
        }

        if (v === undefined) {
          segments = this.segment(segment, v, build);
          if (!isArray(segments)) {
            segments = segments !== undefined ? URI.decode(segments) : undefined;
          } else {
            for (i = 0, l = segments.length; i < l; i++) {
              segments[i] = URI.decode(segments[i]);
            }
          }

          return segments;
        }

        if (!isArray(v)) {
          v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;
        } else {
          for (i = 0, l = v.length; i < l; i++) {
            v[i] = URI.encode(v[i]);
          }
        }

        return this.segment(segment, v, build);
      };

      // mutating query string
      var q = p.query;
      p.query = function(v, build) {
        if (v === true) {
          return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        } else if (typeof v === 'function') {
          var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
          var result = v.call(this, data);
          this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
          this.build(!build);
          return this;
        } else if (v !== undefined && typeof v !== 'string') {
          this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
          this.build(!build);
          return this;
        } else {
          return q.call(this, v, build);
        }
      };
      p.setQuery = function(name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

        if (typeof name === 'string' || name instanceof String) {
          data[name] = value !== undefined ? value : null;
        } else if (typeof name === 'object') {
          for (var key in name) {
            if (hasOwn.call(name, key)) {
              data[key] = name[key];
            }
          }
        } else {
          throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
        }

        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== 'string') {
          build = value;
        }

        this.build(!build);
        return this;
      };
      p.addQuery = function(name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI.addQuery(data, name, value === undefined ? null : value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== 'string') {
          build = value;
        }

        this.build(!build);
        return this;
      };
      p.removeQuery = function(name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI.removeQuery(data, name, value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== 'string') {
          build = value;
        }

        this.build(!build);
        return this;
      };
      p.hasQuery = function(name, value, withinArray) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        return URI.hasQuery(data, name, value, withinArray);
      };
      p.setSearch = p.setQuery;
      p.addSearch = p.addQuery;
      p.removeSearch = p.removeQuery;
      p.hasSearch = p.hasQuery;

      // sanitizing URLs
      p.normalize = function() {
        if (this._parts.urn) {
          return this
            .normalizeProtocol(false)
            .normalizePath(false)
            .normalizeQuery(false)
            .normalizeFragment(false)
            .build();
        }

        return this
          .normalizeProtocol(false)
          .normalizeHostname(false)
          .normalizePort(false)
          .normalizePath(false)
          .normalizeQuery(false)
          .normalizeFragment(false)
          .build();
      };
      p.normalizeProtocol = function(build) {
        if (typeof this._parts.protocol === 'string') {
          this._parts.protocol = this._parts.protocol.toLowerCase();
          this.build(!build);
        }

        return this;
      };
      p.normalizeHostname = function(build) {
        if (this._parts.hostname) {
          if (this.is('IDN') && punycode) {
            this._parts.hostname = punycode.toASCII(this._parts.hostname);
          } else if (this.is('IPv6') && IPv6) {
            this._parts.hostname = IPv6.best(this._parts.hostname);
          }

          this._parts.hostname = this._parts.hostname.toLowerCase();
          this.build(!build);
        }

        return this;
      };
      p.normalizePort = function(build) {
        // remove port of it's the protocol's default
        if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
          this._parts.port = null;
          this.build(!build);
        }

        return this;
      };
      p.normalizePath = function(build) {
        var _path = this._parts.path;
        if (!_path) {
          return this;
        }

        if (this._parts.urn) {
          this._parts.path = URI.recodeUrnPath(this._parts.path);
          this.build(!build);
          return this;
        }

        if (this._parts.path === '/') {
          return this;
        }

        _path = URI.recodePath(_path);

        var _was_relative;
        var _leadingParents = '';
        var _parent, _pos;

        // handle relative paths
        if (_path.charAt(0) !== '/') {
          _was_relative = true;
          _path = '/' + _path;
        }

        // handle relative files (as opposed to directories)
        if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
          _path += '/';
        }

        // resolve simples
        _path = _path
          .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
          .replace(/\/{2,}/g, '/');

        // remember leading parents
        if (_was_relative) {
          _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
          if (_leadingParents) {
            _leadingParents = _leadingParents[0];
          }
        }

        // resolve parents
        while (true) {
          _parent = _path.search(/\/\.\.(\/|$)/);
          if (_parent === -1) {
            // no more ../ to resolve
            break;
          } else if (_parent === 0) {
            // top level cannot be relative, skip it
            _path = _path.substring(3);
            continue;
          }

          _pos = _path.substring(0, _parent).lastIndexOf('/');
          if (_pos === -1) {
            _pos = _parent;
          }
          _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
        }

        // revert to relative
        if (_was_relative && this.is('relative')) {
          _path = _leadingParents + _path.substring(1);
        }

        this._parts.path = _path;
        this.build(!build);
        return this;
      };
      p.normalizePathname = p.normalizePath;
      p.normalizeQuery = function(build) {
        if (typeof this._parts.query === 'string') {
          if (!this._parts.query.length) {
            this._parts.query = null;
          } else {
            this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
          }

          this.build(!build);
        }

        return this;
      };
      p.normalizeFragment = function(build) {
        if (!this._parts.fragment) {
          this._parts.fragment = null;
          this.build(!build);
        }

        return this;
      };
      p.normalizeSearch = p.normalizeQuery;
      p.normalizeHash = p.normalizeFragment;

      p.iso8859 = function() {
        // expect unicode input, iso8859 output
        var e = URI.encode;
        var d = URI.decode;

        URI.encode = escape;
        URI.decode = decodeURIComponent;
        try {
          this.normalize();
        } finally {
          URI.encode = e;
          URI.decode = d;
        }
        return this;
      };

      p.unicode = function() {
        // expect iso8859 input, unicode output
        var e = URI.encode;
        var d = URI.decode;

        URI.encode = strictEncodeURIComponent;
        URI.decode = unescape;
        try {
          this.normalize();
        } finally {
          URI.encode = e;
          URI.decode = d;
        }
        return this;
      };

      p.readable = function() {
        var uri = this.clone();
        // removing username, password, because they shouldn't be displayed according to RFC 3986
        uri.username('').password('').normalize();
        var t = '';
        if (uri._parts.protocol) {
          t += uri._parts.protocol + '://';
        }

        if (uri._parts.hostname) {
          if (uri.is('punycode') && punycode) {
            t += punycode.toUnicode(uri._parts.hostname);
            if (uri._parts.port) {
              t += ':' + uri._parts.port;
            }
          } else {
            t += uri.host();
          }
        }

        if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
          t += '/';
        }

        t += uri.path(true);
        if (uri._parts.query) {
          var q = '';
          for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
            var kv = (qp[i] || '').split('=');
            q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
              .replace(/&/g, '%26');

            if (kv[1] !== undefined) {
              q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
                .replace(/&/g, '%26');
            }
          }
          t += '?' + q.substring(1);
        }

        t += URI.decodeQuery(uri.hash(), true);
        return t;
      };

      // resolving relative and absolute URLs
      p.absoluteTo = function(base) {
        var resolved = this.clone();
        var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
        var basedir, i, p;

        if (this._parts.urn) {
          throw new Error('URNs do not have any generally defined hierarchical components');
        }

        if (!(base instanceof URI)) {
          base = new URI(base);
        }

        if (resolved._parts.protocol) {
          // Directly returns even if this._parts.hostname is empty.
          return resolved;
        } else {
          resolved._parts.protocol = base._parts.protocol;
        }

        if (this._parts.hostname) {
          return resolved;
        }

        for (i = 0; (p = properties[i]); i++) {
          resolved._parts[p] = base._parts[p];
        }

        if (!resolved._parts.path) {
          resolved._parts.path = base._parts.path;
          if (!resolved._parts.query) {
            resolved._parts.query = base._parts.query;
          }
        } else {
          if (resolved._parts.path.substring(-2) === '..') {
            resolved._parts.path += '/';
          }

          if (resolved.path().charAt(0) !== '/') {
            basedir = base.directory();
            basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
            resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
            resolved.normalizePath();
          }
        }

        resolved.build();
        return resolved;
      };
      p.relativeTo = function(base) {
        var relative = this.clone().normalize();
        var relativeParts, baseParts, common, relativePath, basePath;

        if (relative._parts.urn) {
          throw new Error('URNs do not have any generally defined hierarchical components');
        }

        base = new URI(base).normalize();
        relativeParts = relative._parts;
        baseParts = base._parts;
        relativePath = relative.path();
        basePath = base.path();

        if (relativePath.charAt(0) !== '/') {
          throw new Error('URI is already relative');
        }

        if (basePath.charAt(0) !== '/') {
          throw new Error('Cannot calculate a URI relative to another relative URI');
        }

        if (relativeParts.protocol === baseParts.protocol) {
          relativeParts.protocol = null;
        }

        if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
          return relative.build();
        }

        if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
          return relative.build();
        }

        if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
          relativeParts.hostname = null;
          relativeParts.port = null;
        } else {
          return relative.build();
        }

        if (relativePath === basePath) {
          relativeParts.path = '';
          return relative.build();
        }

        // determine common sub path
        common = URI.commonPath(relativePath, basePath);

        // If the paths have nothing in common, return a relative URL with the absolute path.
        if (!common) {
          return relative.build();
        }

        var parents = baseParts.path
          .substring(common.length)
          .replace(/[^\/]*$/, '')
          .replace(/.*?\//g, '../');

        relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';

        return relative.build();
      };

      // comparing URIs
      p.equals = function(uri) {
        var one = this.clone();
        var two = new URI(uri);
        var one_map = {};
        var two_map = {};
        var checked = {};
        var one_query, two_query, key;

        one.normalize();
        two.normalize();

        // exact match
        if (one.toString() === two.toString()) {
          return true;
        }

        // extract query string
        one_query = one.query();
        two_query = two.query();
        one.query('');
        two.query('');

        // definitely not equal if not even non-query parts match
        if (one.toString() !== two.toString()) {
          return false;
        }

        // query parameters have the same length, even if they're permuted
        if (one_query.length !== two_query.length) {
          return false;
        }

        one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
        two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

        for (key in one_map) {
          if (hasOwn.call(one_map, key)) {
            if (!isArray(one_map[key])) {
              if (one_map[key] !== two_map[key]) {
                return false;
              }
            } else if (!arraysEqual(one_map[key], two_map[key])) {
              return false;
            }

            checked[key] = true;
          }
        }

        for (key in two_map) {
          if (hasOwn.call(two_map, key)) {
            if (!checked[key]) {
              // two contains a parameter not present in one
              return false;
            }
          }
        }

        return true;
      };

      // state
      p.preventInvalidHostname = function(v) {
        this._parts.preventInvalidHostname = !!v;
        return this;
      };

      p.duplicateQueryParameters = function(v) {
        this._parts.duplicateQueryParameters = !!v;
        return this;
      };

      p.escapeQuerySpace = function(v) {
        this._parts.escapeQuerySpace = !!v;
        return this;
      };

      return URI;
    }));
    }(URI$1));

    var URI = URI$1.exports;

    // Returns the page type.
    function getPageType() {
        // Order of these conditions matter.
        if (isContentPage()) {
            return "ContentDetail" /* CONTENT_DETAIL */;
        }
        else if (isProductDetailPage()) {
            return "ProductDetail" /* PRODUCT_DETAIL */;
        }
        else if (isCategoryListPage()) {
            return "CategoryList" /* CATEGORY_LIST */;
        }
        else if (isRecordRelatedListPage()) {
            return "RelatedRecordList" /* RELATED_RECORD_LIST */;
        }
        else if (isRecordDetailPage()) {
            return "RecordDetail" /* RECORD_DETAIL */;
        }
        else {
            return getPage$1().getPageType();
        }
    }
    // Returns true is current page is product detail page.
    function isProductDetailPage() {
        var categoryReg = /\/01t{1}(?:0[a-zA-Z0-9]{2}|[a-zA-Z0-9]00)[a-zA-Z0-9]{8}(?:[a-zA-Z0-9]{3})?/;
        return categoryReg.test(globalThis.siteLocation.pathname);
    }
    // Returns true is current page is category list page.
    function isCategoryListPage() {
        var categoryReg = /\/0ZG{1}(?:0[a-zA-Z0-9]{2}|[a-zA-Z0-9]00)[a-zA-Z0-9]{8}(?:[a-zA-Z0-9]{3})?/;
        return categoryReg.test(globalThis.siteLocation.pathname);
    }
    // Returns true is current page is managed content page.
    function isContentPage() {
        var contentReg = /MC[A-Z0-9]{26}$/;
        return contentReg.test(globalThis.siteLocation.pathname);
    }
    // Returns true if current page is record detail page.
    function isRecordDetailPage() {
        if (globalThis.siteLocation.route.type === 'standard__recordPage') {
            return true;
        }
        return false;
    }
    // Returns true if current page is related record list page.
    function isRecordRelatedListPage() {
        var relatedListReg = /related\/[a-z0-9][a-zA-Z0-9]{3}(?:0[a-zA-Z0-9]{2}|[a-zA-Z0-9]00)[a-zA-Z0-9]{8}(?:[a-zA-Z0-9]{3})?\//;
        return relatedListReg.test(globalThis.siteLocation.pathname);
    }
    function getRecordId() {
        if (isRecordDetailPage() || isRecordRelatedListPage()) {
            return globalThis.siteLocation.route.attributes.recordId;
        }
        return undefined;
    }
    function getObjectApiName() {
        if (isRecordDetailPage() || isRecordRelatedListPage()) {
            return globalThis.siteLocation.route.attributes.objectApiName;
        }
        return undefined;
    }
    function getProductId() {
        if (isProductDetailPage()) {
            return URI(globalThis.siteLocation.pathname).segment(-1);
        }
        return undefined;
    }
    function getCategoryId() {
        if (isCategoryListPage()) {
            return URI(globalThis.siteLocation.pathname).segment(-1);
        }
        return undefined;
    }
    function getContentKey() {
        if (isContentPage()) {
            return URI(globalThis.siteLocation.pathname).segment(-1);
        }
        return undefined;
    }
    function getPage() {
        return __assign(__assign({}, getPage$1()), { getRecordId: getRecordId, getContentKey: getContentKey, getProductId: getProductId, getCategoryId: getCategoryId, getObjectApiName: getObjectApiName, getPageType: getPageType });
    }

    // Returns interaction object for eventing purpose.
    function getInteraction$1(name, event, page) {
        return {
            name: name,
            page: page,
            type: event.type,
            event: event
        };
    }

    /**
     * Internal teams add their events here.
     *
     * Name : name of the event.
     * Selector : selector on which event needs to be listened onto(default body).
     * Team : team introducting the event listener.
     */
    var customEvents = [];

    var config$1 = {
        global: {
            onActionEvent: function (actionEvent) {
                var _a;
                if (((_a = actionEvent === null || actionEvent === void 0 ? void 0 : actionEvent.source) === null || _a === void 0 ? void 0 : _a.pageType) != null) {
                    return __assign(__assign({}, actionEvent), { interaction: {
                            name: getPage().getPageType(),
                            page: getPage()
                        } });
                }
                return actionEvent;
            },
            listeners: [
                listener("click" /* CLICK */, 'body', function (event) {
                    var interaction = getInteraction$1("click" /* CLICK */, event, getPage());
                    interaction.name = "click" /* CLICK */;
                    // Will update this then.catch.
                    sendEvent({ interaction: interaction })["finally"](function () { });
                })
            ]
        },
        pageTypeDefault: {
            name: "Other" /* OTHER */,
            listeners: []
        },
        pageTypes: [
            {
                name: "Home" /* HOME */,
                isMatch: function () { return getPage().getPageType() === "Home" /* HOME */; },
                listeners: [],
                interaction: getInteraction$1("pageView" /* PAGE_VIEW */, new CustomEvent("pageView" /* PAGE_VIEW */, {
                    detail: {
                        pageType: "Home" /* HOME */
                    }
                }), getPage())
            },
            {
                name: "Search" /* SEARCH */,
                isMatch: function () { return getPage().getPageType() === "Search" /* SEARCH */; },
                listeners: [],
                interaction: getInteraction$1("pageView" /* PAGE_VIEW */, new CustomEvent("pageView" /* PAGE_VIEW */, {
                    detail: {
                        pageType: "Search" /* SEARCH */
                    }
                }), getPage())
            },
            {
                name: "Error" /* ERROR */,
                isMatch: function () { return getPage().getPageType() === "Error" /* ERROR */; },
                listeners: [],
                interaction: getInteraction$1("pageView" /* PAGE_VIEW */, new CustomEvent("pageView" /* PAGE_VIEW */, {
                    detail: {
                        pageType: "Error" /* ERROR */
                    }
                }), getPage())
            }
        ]
    };
    function populateCustomEventListener(defaultConfig, customEventList) {
        customEventList.forEach(function (customEvent) {
            var _a;
            if (((_a = defaultConfig === null || defaultConfig === void 0 ? void 0 : defaultConfig.global) === null || _a === void 0 ? void 0 : _a.listeners) != null) {
                defaultConfig.global.listeners.push(listener(customEvent.name, customEvent.selector === undefined ? 'body' : customEvent.selector, function (event) {
                    var interaction = getInteraction$1(customEvent.name, event, getPage());
                    // Will update this then.catch.
                    sendEvent({ interaction: interaction })["finally"](function () { });
                }));
            }
        });
    }
    populateCustomEventListener(config$1, customEvents);

    // Returns interaction object for eventing purpose.
    function getInteraction(name, event, page) {
        return getInteraction$1(name, event, page);
    }

    var config = config$1;
    config.pageTypes.push({
        name: "RecordDetail" /* RECORD_DETAIL */,
        isMatch: function () { return getPage().getPageType() === "RecordDetail" /* RECORD_DETAIL */; },
        listeners: [],
        interaction: getInteraction("pageView" /* PAGE_VIEW */, new CustomEvent("pageView" /* PAGE_VIEW */, {
            detail: {
                pageType: "RecordDetail" /* RECORD_DETAIL */
            }
        }), getPage())
    }, {
        name: "RelatedRecordList" /* RELATED_RECORD_LIST */,
        isMatch: function () { return getPage().getPageType() === "RelatedRecordList" /* RELATED_RECORD_LIST */; },
        listeners: [],
        interaction: getInteraction("pageView" /* PAGE_VIEW */, new CustomEvent("pageView" /* PAGE_VIEW */, {
            detail: {
                pageType: "RelatedRecordList" /* RELATED_RECORD_LIST */
            }
        }), getPage())
    }, {
        name: "ContentDetail" /* CONTENT_DETAIL */,
        isMatch: function () { return getPage().getPageType() === "ContentDetail" /* CONTENT_DETAIL */; },
        listeners: [],
        interaction: getInteraction("pageView" /* PAGE_VIEW */, new CustomEvent("pageView" /* PAGE_VIEW */, {
            detail: {
                pageType: "ContentDetail" /* CONTENT_DETAIL */
            }
        }), getPage())
    }, {
        name: "ProductDetail" /* PRODUCT_DETAIL */,
        isMatch: function () { return getPage().getPageType() === "ProductDetail" /* PRODUCT_DETAIL */; },
        listeners: [],
        interaction: getInteraction("pageView" /* PAGE_VIEW */, new CustomEvent("pageView" /* PAGE_VIEW */, {
            detail: {
                pageType: "ProductDetail" /* PRODUCT_DETAIL */
            }
        }), getPage())
    }, {
        name: "CategoryList" /* CATEGORY_LIST */,
        isMatch: function () { return getPage().getPageType() === "CategoryList" /* CATEGORY_LIST */; },
        listeners: [],
        interaction: getInteraction("pageView" /* PAGE_VIEW */, new CustomEvent("pageView" /* PAGE_VIEW */, {
            detail: {
                pageType: "CategoryList" /* CATEGORY_LIST */
            }
        }), getPage())
    });

    function getParsedLocation(route) {
        // Normalisation and Sanitisation of href done here.
        var href = URI(window.location.href).normalize().href();
        // Create new URL object with Normalised + Sanitised href for further consumption.
        var url = new URL(href);
        var siteLocation = {
            search: url.search,
            pathname: url.pathname,
            route: route
        };
        return siteLocation;
    }

    var alreadyOptedIn = false;
    var optIn = function (value) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(value && !alreadyOptedIn)) return [3 /*break*/, 2];
                    alreadyOptedIn = true;
                    // initialize web sdk
                    return [4 /*yield*/, init({
                            consents: [{
                                    status: ConsentStatus.OptIn,
                                    provider: 'Events Out',
                                    purpose: 'Tracking'
                                }]
                        })
                        // initialize the sitemap
                    ];
                case 1:
                    // initialize web sdk
                    _a.sent();
                    // initialize the sitemap
                    initSitemap(config);
                    _a.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    }); };
    document.addEventListener('viewchange', function (event) {
        var viewChangeEvent = event;
        globalThis.siteLocation = getParsedLocation(viewChangeEvent.detail.route);
        // Reinit of sitemap is required on every route change.
        if (alreadyOptedIn) {
            reinit();
        }
    });
    var listen = function (events) {
        if (alreadyOptedIn) {
            populateCustomEventListener(config, events);
            reinit();
        }
    };
    var onEventSend = CustomEvents.OnEventSend;

    window.EventsOut = {
        listen: listen,
        onEventSend: onEventSend,
        optIn: optIn
    };

})();
//# sourceMappingURL=events-out.js.map
