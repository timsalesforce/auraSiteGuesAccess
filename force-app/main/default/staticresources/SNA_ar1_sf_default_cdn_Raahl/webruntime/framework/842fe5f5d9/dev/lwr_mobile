LWR.define("@salesforce/label/MyCommunities.errorInFileDownload/v/0_9_0", ["exports"], function(exports) {
  "use strict";
  var _0_9_0 = `MyCommunities.errorInFileDownload`;
  exports.default = _0_9_0;
  Object.defineProperty(exports, "__esModule", {value: true});
});
LWR.define("mobileruntime/hybridAppManager/v/1", ["exports", "lwr/loaderLegacy/v/0_9_0", "logger/v/1_66_319-244_0", "webruntime/routingService/v/1_66_319-244_0", "@salesforce/site/Id/v/1", "webruntime/transport/v/1_66_319-244_0", "lwc/v/2_41_4", "@app/basePath/v/1", "@app/loginPath/v/1", "@app/uiBasePath/v/1", "@salesforce/label/MyCommunities.errorInFileDownload/v/0_9_0", "webruntime/overrides/v/1_66_319-244_0"], function(exports, _0_9_0, _1_66_319244_0$1, _1_66_319244_0$3, siteId, _1_66_319244_0$2, _2_41_4, basePath$1, loginPath, basePath, fileDownloadErrorMsg, _1_66_319244_0) {
  "use strict";
  function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {default: e};
  }
  var siteId__default = /* @__PURE__ */ _interopDefaultLegacy(siteId);
  var basePath$1__default = /* @__PURE__ */ _interopDefaultLegacy(basePath$1);
  var loginPath__default = /* @__PURE__ */ _interopDefaultLegacy(loginPath);
  var basePath__default = /* @__PURE__ */ _interopDefaultLegacy(basePath);
  var fileDownloadErrorMsg__default = /* @__PURE__ */ _interopDefaultLegacy(fileDownloadErrorMsg);
  function injectCordovaJS() {
    if (window.navigator?.userAgent?.includes("android")) {
      const {
        head
      } = document;
      const scriptEl = document.createElement("script");
      scriptEl.src = "/localhost/cordova.js";
      head.appendChild(scriptEl);
    }
  }
  function injectNativeApis() {
    window.native = {
      sendAILTNData: function(payload) {
        if (!payload?.logLines) {
          return new Promise(function(resolve, reject) {
            reject("Received null or invalid payload");
          });
        }
      },
      refreshNotifications: function() {
        document.dispatchEvent(new CustomEvent("refreshNotifications", {
          detail: {},
          bubbles: true,
          cancelable: true,
          composed: false
        }));
      },
      navigateTo: function(pageRef) {
        return new Promise(function(resolve, reject) {
          if (!pageRef) {
            reject("Received invalid pageReference payload");
            return;
          }
          _1_66_319244_0$3.generateUrl(pageRef).then((url) => {
            window.open(new URL(url, window.location.href));
            resolve();
          }, (error) => reject(error));
        });
      }
    };
  }
  const $fragment1 = _2_41_4.parseFragment`<div class="slds-backdrop slds-backdrop_open${0}"${2}></div>`;
  const stc0 = {
    key: 0
  };
  const stc1 = {
    "slds-modal": true,
    "slds-fade-in-open": true,
    "slds-modal_large": true
  };
  const stc2 = {
    classMap: {
      "slds-modal__container": true
    },
    key: 2
  };
  const stc3 = {
    classMap: {
      "slds-modal__header": true
    },
    key: 3
  };
  const stc4 = {
    "slds-modal__title": true,
    "slds-hyphenate": true
  };
  const stc5 = {
    "slds-modal__content": true,
    "slds-var-p-around_medium": true
  };
  const stc6 = {
    classMap: {
      "slds-text-align_center": true,
      "slds-text-heading_small": true,
      "slds-var-p-around_medium": true
    },
    key: 6
  };
  const stc7 = {
    classMap: {
      "slds-modal__footer": true
    },
    key: 7
  };
  const stc8 = {
    "slds-button": true,
    "slds-button_brand": true
  };
  const stc9 = {
    key: 9
  };
  const stc10 = {
    key: 11
  };
  function tmpl($api, $cmp, $slotset, $ctx) {
    const {gid: api_scoped_id, d: api_dynamic_text, t: api_text, h: api_element, b: api_bind, st: api_static_fragment} = $api;
    const {_m0, _m1} = $ctx;
    return [$cmp.showModal ? api_element("section", stc0, [api_element("section", {
      classMap: stc1,
      attrs: {
        role: "dialog",
        tabindex: "-1",
        "aria-labelledby": api_scoped_id("modal-heading-01"),
        "aria-modal": "true",
        "aria-describedby": api_scoped_id("modal-content-id-1")
      },
      key: 1
    }, [api_element("div", stc2, [api_element("header", stc3, [api_element("h2", {
      classMap: stc4,
      attrs: {
        id: api_scoped_id("modal-heading-01")
      },
      key: 4
    }, [api_text(api_dynamic_text($cmp.labels.ModalHeader))])]), api_element("div", {
      classMap: stc5,
      attrs: {
        id: api_scoped_id("modal-content-id-1")
      },
      key: 5
    }, [api_element("div", stc6, [api_text(api_dynamic_text($cmp.modalBody))])]), api_element("footer", stc7, [!$cmp.forceAppUpdate ? api_element("button", {
      classMap: stc8,
      key: 8,
      on: {
        click: _m0 || ($ctx._m0 = api_bind($cmp.remindMeLater))
      }
    }, [api_element("label", stc9, [api_text(api_dynamic_text($cmp.labels.RemindMeLater))])]) : null, api_element("button", {
      classMap: stc8,
      key: 10,
      on: {
        click: _m1 || ($ctx._m1 = api_bind($cmp.openStore))
      }
    }, [api_element("label", stc10, [api_text(api_dynamic_text($cmp.labels.UpdateNow))])])])])]), api_static_fragment($fragment1(), 13)]) : null];
  }
  var _tmpl = _2_41_4.registerTemplate(tmpl);
  tmpl.stylesheets = [];
  tmpl.stylesheetToken = "mobileruntime-appUpdateModal_appUpdateModal";
  _2_41_4.freezeTemplate(tmpl);
  const labels = {
    ModalHeader: "Update Your App",
    ForceUpdateModalBody: "You must update to the latest version of this app to continue using it.",
    ModalBody: "A new version of this app is available.Find and install the latest version of the app for your device.",
    RemindMeLater: "Remind Me Later",
    UpdateNow: "Update Now"
  };
  class AppUpdateModal extends _2_41_4.LightningElement {
    constructor(...args) {
      super(...args);
      this.showModal = true;
      this.config = {};
    }
    get labels() {
      return labels;
    }
    get modalBody() {
      return this.config.forceAppUpdate ? this.labels.ForceUpdateModalBody : this.labels.ModalBody;
    }
    openStore() {
      window.open(this.config?.minVersion?.url?.trim());
    }
    remindMeLater() {
      this.showModal = false;
    }
  }
  _2_41_4.registerDecorators(AppUpdateModal, {
    publicProps: {
      config: {
        config: 0
      }
    },
    fields: ["showModal"]
  });
  var AppUpdateModal$1 = _2_41_4.registerComponent(AppUpdateModal, {
    tmpl: _tmpl,
    sel: "mobileruntime-appUpdateModal"
  });
  const _excluded = ["payload"];
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  const FETCH_NATIVE_TABBAR_CONFIG = `/services/data/v57.0/connect/sites/${siteId__default["default"]}/cms/delivery/contents?contentTypeFQN=sfdc_cms__mobilePublisherConfig&includeContentBody=true`;
  function invokeNativeApi(action, params) {
    if (!isNativeJSAvailable()) {
      _1_66_319244_0$1.log("Native JS API is not available");
      return;
    }
    const {
      invokeNative
    } = window.mycommunities.nativejsapi;
    return invokeNative(action, params);
  }
  function isAbsoluteUrl(url = "") {
    return new RegExp("^([a-z]+://)", "i").test(url);
  }
  function isExternalLink(url = "") {
    if (!isAbsoluteUrl(url)) {
      return false;
    }
    const urlObj = new URL(url);
    const currentHost = window.location.host;
    return urlObj.host !== currentHost;
  }
  async function hideSplashScreen() {
    if (!isNativeJSAvailable()) {
      _1_66_319244_0$1.log("Native JS API is not available");
      return;
    }
    injectCordovaJS();
    try {
      const response = await _1_66_319244_0$2.fetch(FETCH_NATIVE_TABBAR_CONFIG, {
        method: "GET"
      });
      if (response.status === 200) {
        const data = await response.json();
        const href = window.location.href.endsWith("/") ? window.location.href.slice(0, -1) : window.location.href;
        const {
          nativeTabMenu,
          mobilePublisherAppUpdateConfig
        } = data.contents[0]?.contentBody || {};
        nativeTabMenu?.menuItems?.forEach((menuItem, idx) => {
          const {
            payload
          } = menuItem, item = _objectWithoutProperties(menuItem, _excluded);
          nativeTabMenu.menuItems[idx] = _objectSpread(_objectSpread({}, item), {}, {
            id: (idx + 1) * 10,
            position: idx + 1,
            targetUrl: href + menuItem.targetUrl,
            iconDetails: _objectSpread(_objectSpread({}, item.iconDetails), {}, {
              mimeType: "image/png",
              url: `data:image/png;base64,${payload}`
            })
          });
        });
        if (mobilePublisherAppUpdateConfig) {
          const {
            forceAppUpdate,
            enableAppUpdate,
            minVersion
          } = mobilePublisherAppUpdateConfig;
          const platform = isIOS() ? "ios" : isAndroid() ? "android" : "";
          const config = {
            forceAppUpdate,
            enableAppUpdate,
            minVersion: minVersion[platform]
          };
          if (isNativeFeatureFlagEnabled("forceAppUpdate")) {
            nativeTabMenu.appUpdateConfig = {
              enableAppUpdate,
              gracePeriod: forceAppUpdate ? 0 : 15
            };
          } else {
            showWebViewModal(config);
          }
        }
        triggerWebAppBootstrapDone(nativeTabMenu);
      } else {
        _1_66_319244_0$1.log("Failed to fetch bottom tab bar. Status is: ", response.status);
        triggerWebAppBootstrapDone(true);
      }
    } catch (err) {
      _1_66_319244_0$1.log("Failed to fetch bottom tab bar", err);
      triggerWebAppBootstrapDone(true);
    }
    _1_66_319244_0$1.log("Initial load done! Splash Screen hidden");
  }
  function isRedirectToNetworkSwitcher(url, siteURLPrefix) {
    const urlObj = new URL(url || "", window.location.origin);
    url = urlObj.href;
    const switchNetworkPath = "/servlet/networks/switch";
    const clickedURLPathName = urlObj.pathname;
    const idxOfSlashS = clickedURLPathName.indexOf("/s/");
    const clickedURLPrefix = idxOfSlashS === -1 ? clickedURLPathName : clickedURLPathName.substring(0, idxOfSlashS + 2);
    return [switchNetworkPath, encodeURIComponent(switchNetworkPath)].some((networkPath) => url.includes(networkPath)) || !clickedURLPrefix.startsWith(siteURLPrefix);
  }
  function to18Char(recordId) {
    if (!recordId) {
      return null;
    }
    switch (recordId.length) {
      case 15:
        return get18CharId(recordId);
      case 18:
        return recordId;
      default:
        return null;
    }
  }
  function isCordovaAvailable() {
    const {
      cordova
    } = window;
    return typeof cordova !== "undefined" && cordova && cordova.require("cordova/channel") && cordova.require("cordova/channel").onDeviceReady && cordova.require("cordova/channel").onDeviceReady.state === 2;
  }
  function getCordovaOauthPlugin() {
    return isCordovaAvailable() ? window.cordova.require("com.salesforce.plugin.oauth") : null;
  }
  function isLogoutURL(url) {
    if (!url) {
      return false;
    }
    const logoutUrl = "/secur/logout.jsp";
    return url.includes(logoutUrl) || url.includes(encodeURIComponent(logoutUrl));
  }
  function handleLogout(logoutUrl) {
    const oAuthPlugin = getCordovaOauthPlugin();
    if (oAuthPlugin) {
      oAuthPlugin.logout(logoutUrl);
    }
  }
  function handleDOMContentLoaded() {
    _1_66_319244_0$1.log("hybrid_app_manager_utils:handle_page_loaded");
    injectNativeApis();
    if (isNativeJSAvailable()) {
      if (typeof window.mycommunities.nativejsapi.webAppPageLoadDone === "function") {
        _1_66_319244_0$1.log("hybrid_app_manager_utils:handle_page_loaded: webAppPageLoadDone function called");
        window.mycommunities.nativejsapi.webAppPageLoadDone();
      } else {
        _1_66_319244_0$1.log("hybrid_app_manager_utils:handle_page_loaded:webAppPageLoadDone function is not available");
      }
    }
  }
  function triggerWebAppBootstrapDone(data) {
    const {
      webAppBootstrapDone
    } = window.mycommunities.nativejsapi;
    _1_66_319244_0$1.log("Triggering webAppBootstrapDone");
    webAppBootstrapDone(data);
  }
  function isNativeFeatureFlagEnabled(featureName) {
    if (isNativeJSAvailable()) {
      const clientFeatures = window.mycommunities.nativejsapi.clientFeatures;
      return clientFeatures?.[featureName]?.enabled;
    }
    return false;
  }
  function showWebViewModal(config) {
    const currentAppVersion = getCurrentAppVersion();
    if (config.enableAppUpdate && currentAppVersion) {
      const minAppVersion = config.minVersion.version;
      const showModal = compareAppVersion(currentAppVersion, minAppVersion);
      if (showModal) {
        const modal = _2_41_4.createElement("app-update-modal", {
          is: AppUpdateModal$1
        });
        modal.config = config;
        document.body.appendChild(modal);
      }
    }
  }
  function compareAppVersion(currentAppVersion, minAppVersion) {
    let v1parts = currentAppVersion.split(".");
    let v2parts = minAppVersion.split(".");
    let versionComparatorVal = 0;
    while (v1parts.length < v2parts.length)
      v1parts.push("0");
    while (v2parts.length < v1parts.length)
      v2parts.push("0");
    v1parts = v1parts.map(Number);
    v2parts = v2parts.map(Number);
    for (let i = 0; i < v1parts.length; ++i) {
      if (v1parts[i] === v2parts[i]) {
        continue;
      } else if (v1parts[i] > v2parts[i]) {
        versionComparatorVal = 1;
        break;
      } else {
        versionComparatorVal = -1;
        break;
      }
    }
    return versionComparatorVal === -1;
  }
  function isIOS() {
    const userAgent = window.navigator.userAgent;
    return userAgent.toLowerCase().includes("iphone") || userAgent.toLowerCase().includes("ipad");
  }
  function isAndroid() {
    const userAgent = window.navigator.userAgent;
    return userAgent.toLowerCase().includes("android");
  }
  function getCurrentAppVersion() {
    const userAgent = window.navigator.userAgent;
    const appVersion = userAgent.split("CommunityHybridContainer/")[1];
    return appVersion && (appVersion.match(/(\d{1,3}\.)?(\d{1,3}\.)?(\d{1,3})/) || [])[0];
  }
  function get18CharId(recordId) {
    let suffix = "";
    const CASE_DECODE_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456";
    for (let set = 0; set < 3; ++set) {
      let decode_value = 0;
      for (let bit = 0; bit < 5; bit++) {
        const c = recordId.charAt(set * 5 + bit);
        if (c >= "A" && c <= "Z") {
          decode_value += 1 << bit;
        }
      }
      suffix += CASE_DECODE_STRING.charAt(decode_value);
    }
    return recordId + suffix;
  }
  function isNativeJSAvailable() {
    return window?.mycommunities?.nativejsapi;
  }
  const FRONTDOOR_PATH_PREFIX = "/secur/frontdoor.jsp";
  function handleSessionTimeout({
    routeUrl
  }) {
    const oAuthPlugin = getCordovaOauthPlugin();
    if (oAuthPlugin) {
      oAuthPlugin.authenticate(function(map) {
        if (map && map.accessToken) {
          document.cookie = `sid=${map.accessToken}; path=/; secure=true`;
          if (routeUrl != null) {
            window.open(routeUrl);
          }
        }
      }, function() {
        _1_66_319244_0$1.logError("Error in handler Session Timeout. Cordova OAuth Plugin authentication failed.");
      });
    } else {
      _1_66_319244_0$1.logError("Error in handler Session Timeout. OAuth Plugin is not available.");
    }
  }
  async function isSessionTimeout() {
    let isTimeout = false;
    const user = await _0_9_0.load("@app/user/v/1");
    try {
      await _0_9_0.load(`@app/user?c=${crypto.randomUUID()}`, "mobileruntime/hybridAppManager/v/1");
    } catch (e) {
      isTimeout = !user.isGuest;
    }
    return isTimeout;
  }
  function isLoginNavigation(url) {
    const loginURL = new URL(loginPath__default["default"], window.location.href);
    const pageURL = new URL(url, window.location.href);
    return loginPath__default["default"] && loginURL.pathname === pageURL.pathname && loginURL.origin === pageURL.origin;
  }
  function handleAuthentication(startURL) {
    const oAuthPlugin = getCordovaOauthPlugin();
    if (oAuthPlugin) {
      oAuthPlugin.authenticate(function(creds) {
        window.location.href = `${creds.loginUrl}${FRONTDOOR_PATH_PREFIX}?sid=${creds.accessToken}&retURL=${encodeURIComponent(startURL || basePath__default["default"])}&display=touch`;
      }, function() {
        throw new Error("Authentication via Cordova OAuth Plugin failed.");
      });
    } else {
      window.location.href = startURL || loginPath__default["default"];
    }
  }
  function handleAuthenticationForLoginRoute(route) {
    if (typeof route === "object") {
      const {
        attributes: {
          url
        } = {
          url: null
        }
      } = route;
      if (isLoginNavigation(url)) {
        const routeURL = new URL(url, window.location.href);
        handleAuthentication(routeURL.searchParams.get("startURL"));
        return false;
      }
    }
    return true;
  }
  async function handleAuthenticationForPrivateRoute({
    next: {
      route,
      data
    } = {}
  } = {}) {
    if (data && data.isPublic !== false) {
      return true;
    }
    const {
      default: user
    } = await _0_9_0.load("@app/user/v/1");
    if (user.isGuest) {
      const url = await _1_66_319244_0$3.generateUrl(route);
      if (url) {
        const routeURL = new URL(url, window.location.href);
        handleAuthentication(routeURL.pathname + routeURL.search + routeURL.hash);
        return false;
      }
    }
    return true;
  }
  const VALID_DOWNLOAD_PATHS = ["/sfc/servlet.shepherd", "/servlet/servlet.FileDownload", "/servlet/fileField", "version/renditionDownload"];
  function showErrorToastMessage() {
    _1_66_319244_0$1.log("Handle showing of Toast Message for Error case.");
  }
  function parseFileDownloadUrl(url) {
    const fileContentDownloadRoute = "/sfc/servlet.:type/:contentType/download/:recordId";
    const fileContentRouteMatcher = new RegExp(fileContentDownloadRoute.replace(/:[^\s/]+/g, "([\\w-]+)"));
    const match = url.match(fileContentRouteMatcher);
    if (match && match.length === 4) {
      return {
        recordId: match[3]
      };
    }
    const attachmentDownloadRoute = "/servlet/servlet.:type?file=:recordId";
    const attachmentRouteMatcher = new RegExp(attachmentDownloadRoute.replace(/:[^\s/?]+/g, "([\\w-]+)").replace(/\?/g, "[?]"));
    const attachmentMatch = url.match(attachmentRouteMatcher);
    if (attachmentMatch && attachmentMatch.length === 3) {
      return {
        recordId: attachmentMatch[2]
      };
    }
    const FILE_FIELD_PATH = "/servlet/fileField";
    if (url.includes(FILE_FIELD_PATH)) {
      const searchParams = new URLSearchParams(decodeURIComponent(url).split("?")[1]);
      const recordId = searchParams.get("entityId");
      const fieldId = searchParams.get("field");
      return {
        recordId,
        fieldId
      };
    }
    const RENDITION_DOWNLOAD_PATH = "version/renditionDownload";
    if (url.includes(RENDITION_DOWNLOAD_PATH)) {
      const renditionURL = new URL(url);
      const versionId = renditionURL.searchParams.get("versionId");
      return {
        recordId: to18Char(versionId)
      };
    }
    return null;
  }
  function invokeFileDownload(recordInfo) {
    const nativePromise = invokeNativeApi("downloadFile", recordInfo);
    if (nativePromise) {
      return nativePromise.catch((error) => {
        _1_66_319244_0$1.log(`Error while downloading file of record id: ${recordInfo.recordId} message: ${error}` && error.message);
        showErrorToastMessage();
      });
    }
  }
  function handleFileDownloadUrl(url) {
    if (!url) {
      _1_66_319244_0$1.log(`${fileDownloadErrorMsg__default["default"]}. URL is ${url}`);
      showErrorToastMessage();
      return;
    }
    const recordInformation = parseFileDownloadUrl(url);
    if (!recordInformation) {
      _1_66_319244_0$1.log(`Parsing the file URL "${url}" yielded null`);
      showErrorToastMessage();
      return;
    }
    return invokeFileDownload(recordInformation);
  }
  function isFileDownloadUrl(url) {
    url = url || "";
    return VALID_DOWNLOAD_PATHS.some((downloadPath) => url.indexOf(downloadPath) > -1);
  }
  const originalOpen = globalThis.open;
  function handlePageNavigation(url) {
    const urlObj = new URL(url, window.location.href);
    url = urlObj.href;
    if (url.indexOf("/") !== 0 && url.indexOf("http://") !== 0 && url.indexOf("https://") !== 0) {
      return originalOpen(url, "_self");
    }
    if (isLogoutURL(url)) {
      handleLogout(url);
    } else if (isExternalLink(urlObj)) {
      invokeNativeApi("navigateToExternalURL", {
        url
      });
    } else if (isLoginNavigation(url)) {
      dispatchNavigationEvent({
        type: "standard__webPage",
        attributes: {
          url: urlObj.pathname + urlObj.searchParams + urlObj.hash
        }
      }, false);
    } else if (isFileDownloadUrl(url)) {
      handleFileDownloadUrl(url);
    } else if (isRedirectToNetworkSwitcher(url, basePath$1__default["default"])) {
      invokeNativeApi("navigateToExternalURL", {
        url
      });
    } else {
      const pathname = urlObj.pathname;
      const replaceState = pathname === "/" || pathname === basePath$1__default["default"];
      dispatchNavigationEvent({
        type: "standard__webPage",
        attributes: {
          url: pathname
        }
      }, replaceState);
    }
  }
  function dispatchNavigationEvent(routeObj, replaceState) {
    return document.dispatchEvent(new CustomEvent("notify-client-module", {
      cancelable: true,
      composed: true,
      detail: {
        action: "navigate",
        data: {
          routeObj,
          replaceState
        }
      }
    }));
  }
  function links() {
    registerDOMEvents();
  }
  function registerDOMEvents() {
    document.addEventListener("click", handleEvent);
    document.addEventListener("notify-mobile-module", notifyMobileModule);
  }
  function handleNavigationCompleted({
    pathMatch: path,
    route,
    routeDefinition
  }) {
    const {
      id
    } = route || {};
    const {
      type
    } = route?.pageReference || {};
    const {
      isRoot
    } = routeDefinition?.metadata || {};
    document.dispatchEvent(new CustomEvent("routeChangeSuccess", {
      bubbles: true,
      composed: true,
      detail: {
        routeType: type,
        routeId: id,
        routeUrl: path,
        backNavigation: {
          canGoBack: !isRoot
        }
      }
    }));
  }
  function handleEvent(event) {
    const target = event.composedPath()[0];
    if (target.tagName.toLowerCase() === "a") {
      event.preventDefault();
      event.stopPropagation();
      return handlePageNavigation(target.href);
    }
  }
  function notifyMobileModule({
    detail
  }) {
    const {
      action,
      data
    } = detail || {
      action: "",
      data: null
    };
    switch (action) {
      case "navigationcompleted":
        handleNavigationCompleted(data?.routeResult || {});
        break;
      default:
        _1_66_319244_0$1.log(`No such ${action} exists in notify-mobile-module event. Please re-check!!`);
        break;
    }
  }
  function overrideWindowOpen() {
    window.open = (url) => {
      return handlePageNavigation(url);
    };
  }
  async function hybridAppManager() {
    await hideSplashScreen();
    if (/interactive|complete/.test(document.readyState)) {
      handleDOMContentLoaded();
    } else {
      document.addEventListener("DOMContentLoaded", handleDOMContentLoaded, false);
    }
    overrideWindowOpen();
    return links();
  }
  function handleTimeout() {
    handleSessionTimeout({
      routeUrl: window.location.pathname
    });
    return false;
  }
  _1_66_319244_0.PreNavigateOverrides.add((routeInfo) => {
    return handleAuthenticationForPrivateRoute(routeInfo);
  });
  _1_66_319244_0.NavigationOverrides.add((route) => {
    return handleAuthenticationForLoginRoute(route);
  });
  _1_66_319244_0.PageNavigationFailureOverrides.add(async ({
    error,
    isPublic
  }) => {
    const isTimeout = await isSessionTimeout();
    if (error?.constructor?.name === "LoaderError" && !isPublic && isTimeout) {
      return handleTimeout();
    }
    return true;
  });
  _1_66_319244_0.SessionTimeoutOverrides.add(() => {
    return handleTimeout();
  });
  function defineModules(modulesByName) {
    Object.entries(modulesByName).forEach(([name, module]) => {
      LWR.define(name, [], function() {
        return module;
      });
    });
  }
  defineModules({
    "mobileruntime/hybridAppManager": hybridAppManager
  });
  exports.hybridAppManager = hybridAppManager;
  Object.defineProperty(exports, "__esModule", {value: true});
});
